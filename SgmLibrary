/*!
 * Bowser - a browser detector
 * https://github.com/ded/bowser
 * MIT License | (c) Dustin Diaz 2015
 */

!function (name, definition) {
  this[name] = definition()
}('bowser', function () {
  /**
   * See useragents.js for examples of navigator.userAgent
   */

  var t = true;

  function detect(ua) {

    function getFirstMatch(regex) {
      var match = ua.match(regex);
      return (match && match.length > 1 && match[1]) || '';
    }

    function getSecondMatch(regex) {
      var match = ua.match(regex);
      return (match && match.length > 1 && match[2]) || '';
    }

    var iosdevice = getFirstMatch(/(ipod|iphone|ipad)/i).toLowerCase()
      , likeAndroid = /like android/i.test(ua)
      , android = !likeAndroid && /android/i.test(ua)
      , nexusMobile = /nexus\s*[0-6]\s*/i.test(ua)
      , nexusTablet = !nexusMobile && /nexus\s*[0-9]+/i.test(ua)
      , chromeos = /CrOS/.test(ua)
      , silk = /silk/i.test(ua)
      , sailfish = /sailfish/i.test(ua)
      , tizen = /tizen/i.test(ua)
      , webos = /(web|hpw)os/i.test(ua)
      , windowsphone = /windows phone/i.test(ua)
      , samsungBrowser = /SamsungBrowser/i.test(ua)
      , windows = !windowsphone && /windows/i.test(ua)
      , mac = !iosdevice && !silk && /macintosh/i.test(ua)
      , linux = !android && !sailfish && !tizen && !webos && /linux/i.test(ua)
      , edgeVersion = getFirstMatch(/edge\/(\d+(\.\d+)?)/i)
      , versionIdentifier = getFirstMatch(/version\/(\d+(\.\d+)?)/i)
      , tablet = /tablet/i.test(ua)
      , mobile = !tablet && /[^-]mobi/i.test(ua)
      , xbox = /xbox/i.test(ua)
      , result

    if (/opera/i.test(ua)) {
      //  an old Opera
      result = {
        name: 'Opera'
        , opera: t
        , version: versionIdentifier || getFirstMatch(/(?:opera|opr|opios)[\s\/](\d+(\.\d+)?)/i)
      }
    } else if (/opr|opios/i.test(ua)) {
      // a new Opera
      result = {
        name: 'Opera'
        , opera: t
        , version: getFirstMatch(/(?:opr|opios)[\s\/](\d+(\.\d+)?)/i) || versionIdentifier
      }
    }
    else if (/SamsungBrowser/i.test(ua)) {
      result = {
        name: 'Samsung Internet for Android'
        , samsungBrowser: t
        , version: versionIdentifier || getFirstMatch(/(?:SamsungBrowser)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/coast/i.test(ua)) {
      result = {
        name: 'Opera Coast'
        , coast: t
        , version: versionIdentifier || getFirstMatch(/(?:coast)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/yabrowser/i.test(ua)) {
      result = {
        name: 'Yandex Browser'
        , yandexbrowser: t
        , version: versionIdentifier || getFirstMatch(/(?:yabrowser)[\s\/](\d+(\.\d+)?)/i)
      }
    }
    else if (/ucbrowser/i.test(ua)) {
      result = {
        name: 'UC Browser'
        , ucbrowser: t
        , version: getFirstMatch(/(?:ucbrowser)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/mxios/i.test(ua)) {
      result = {
        name: 'Maxthon'
        , maxthon: t
        , version: getFirstMatch(/(?:mxios)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/epiphany/i.test(ua)) {
      result = {
        name: 'Epiphany'
        , epiphany: t
        , version: getFirstMatch(/(?:epiphany)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/puffin/i.test(ua)) {
      result = {
        name: 'Puffin'
        , puffin: t
        , version: getFirstMatch(/(?:puffin)[\s\/](\d+(?:\.\d+)?)/i)
      }
    }
    else if (/sleipnir/i.test(ua)) {
      result = {
        name: 'Sleipnir'
        , sleipnir: t
        , version: getFirstMatch(/(?:sleipnir)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (/k-meleon/i.test(ua)) {
      result = {
        name: 'K-Meleon'
        , kMeleon: t
        , version: getFirstMatch(/(?:k-meleon)[\s\/](\d+(?:\.\d+)+)/i)
      }
    }
    else if (windowsphone) {
      result = {
        name: 'Windows Phone'
        , windowsphone: t
      }
      if (edgeVersion) {
        result.msedge = t
        result.version = edgeVersion
      }
      else {
        result.msie = t
        result.version = getFirstMatch(/iemobile\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/msie|trident/i.test(ua)) {
      result = {
        name: 'Internet Explorer'
        , msie: t
        , version: getFirstMatch(/(?:msie |rv:)(\d+(\.\d+)?)/i)
      }
    } else if (chromeos) {
      result = {
        name: 'Chrome'
        , chromeos: t
        , chromeBook: t
        , chrome: t
        , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      }
    } else if (/chrome.+? edge/i.test(ua)) {
      result = {
        name: 'Microsoft Edge'
        , msedge: t
        , version: edgeVersion
      }
    }
    else if (/vivaldi/i.test(ua)) {
      result = {
        name: 'Vivaldi'
        , vivaldi: t
        , version: getFirstMatch(/vivaldi\/(\d+(\.\d+)?)/i) || versionIdentifier
      }
    }
    else if (sailfish) {
      result = {
        name: 'Sailfish'
        , sailfish: t
        , version: getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/seamonkey\//i.test(ua)) {
      result = {
        name: 'SeaMonkey'
        , seamonkey: t
        , version: getFirstMatch(/seamonkey\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/firefox|iceweasel|fxios/i.test(ua)) {
      result = {
        name: 'Firefox'
        , firefox: t
        , version: getFirstMatch(/(?:firefox|iceweasel|fxios)[ \/](\d+(\.\d+)?)/i)
      }
      if (/\((mobile|tablet);[^\)]*rv:[\d\.]+\)/i.test(ua)) {
        result.firefoxos = t
      }
    }
    else if (silk) {
      result = {
        name: 'Amazon Silk'
        , silk: t
        , version: getFirstMatch(/silk\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/phantom/i.test(ua)) {
      result = {
        name: 'PhantomJS'
        , phantom: t
        , version: getFirstMatch(/phantomjs\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/slimerjs/i.test(ua)) {
      result = {
        name: 'SlimerJS'
        , slimer: t
        , version: getFirstMatch(/slimerjs\/(\d+(\.\d+)?)/i)
      }
    }
    else if (/blackberry|\bbb\d+/i.test(ua) || /rim\stablet/i.test(ua)) {
      result = {
        name: 'BlackBerry'
        , blackberry: t
        , version: versionIdentifier || getFirstMatch(/blackberry[\d]+\/(\d+(\.\d+)?)/i)
      }
    }
    else if (webos) {
      result = {
        name: 'WebOS'
        , webos: t
        , version: versionIdentifier || getFirstMatch(/w(?:eb)?osbrowser\/(\d+(\.\d+)?)/i)
      };
      /touchpad\//i.test(ua) && (result.touchpad = t)
    }
    else if (/bada/i.test(ua)) {
      result = {
        name: 'Bada'
        , bada: t
        , version: getFirstMatch(/dolfin\/(\d+(\.\d+)?)/i)
      };
    }
    else if (tizen) {
      result = {
        name: 'Tizen'
        , tizen: t
        , version: getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.\d+)?)/i) || versionIdentifier
      };
    }
    else if (/qupzilla/i.test(ua)) {
      result = {
        name: 'QupZilla'
        , qupzilla: t
        , version: getFirstMatch(/(?:qupzilla)[\s\/](\d+(?:\.\d+)+)/i) || versionIdentifier
      }
    }
    else if (/chromium/i.test(ua)) {
      result = {
        name: 'Chromium'
        , chromium: t
        , version: getFirstMatch(/(?:chromium)[\s\/](\d+(?:\.\d+)?)/i) || versionIdentifier
      }
    }
    else if (/chrome|crios|crmo/i.test(ua)) {
      result = {
        name: 'Chrome'
        , chrome: t
        , version: getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.\d+)?)/i)
      }
    }
    else if (android) {
      result = {
        name: 'Android'
        , version: versionIdentifier
      }
    }
    else if (/safari|applewebkit/i.test(ua)) {
      result = {
        name: 'Safari'
        , safari: t
      }
      if (versionIdentifier) {
        result.version = versionIdentifier
      }
    }
    else if (iosdevice) {
      result = {
        name: iosdevice == 'iphone' ? 'iPhone' : iosdevice == 'ipad' ? 'iPad' : 'iPod'
      }
      // WTF: version is not part of user agent in web apps
      if (versionIdentifier) {
        result.version = versionIdentifier
      }
    }
    else if (/googlebot/i.test(ua)) {
      result = {
        name: 'Googlebot'
        , googlebot: t
        , version: getFirstMatch(/googlebot\/(\d+(\.\d+))/i) || versionIdentifier
      }
    }
    else {
      result = {
        name: getFirstMatch(/^(.*)\/(.*) /),
        version: getSecondMatch(/^(.*)\/(.*) /)
      };
    }

    // set webkit or gecko flag for browsers based on these engines
    if (!result.msedge && /(apple)?webkit/i.test(ua)) {
      if (/(apple)?webkit\/537\.36/i.test(ua)) {
        result.name = result.name || "Blink"
        result.blink = t
      } else {
        result.name = result.name || "Webkit"
        result.webkit = t
      }
      if (!result.version && versionIdentifier) {
        result.version = versionIdentifier
      }
    } else if (!result.opera && /gecko\//i.test(ua)) {
      result.name = result.name || "Gecko"
      result.gecko = t
      result.version = result.version || getFirstMatch(/gecko\/(\d+(\.\d+)?)/i)
    }

    // set OS flags for platforms that have multiple browsers
    if (!result.windowsphone && !result.msedge && (android || result.silk)) {
      result.android = t
    } else if (!result.windowsphone && !result.msedge && iosdevice) {
      result[iosdevice] = t
      result.ios = t
    } else if (mac) {
      result.mac = t
    } else if (xbox) {
      result.xbox = t
    } else if (windows) {
      result.windows = t
    } else if (linux) {
      result.linux = t
    }

    // OS version extraction
    var osVersion = '';
    if (result.windowsphone) {
      osVersion = getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i);
    } else if (iosdevice) {
      osVersion = getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i);
      osVersion = osVersion.replace(/[_\s]/g, '.');
    } else if (android) {
      osVersion = getFirstMatch(/android[ \/-](\d+(\.\d+)*)/i);
    } else if (result.webos) {
      osVersion = getFirstMatch(/(?:web|hpw)os\/(\d+(\.\d+)*)/i);
    } else if (result.blackberry) {
      osVersion = getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i);
    } else if (result.bada) {
      osVersion = getFirstMatch(/bada\/(\d+(\.\d+)*)/i);
    } else if (result.tizen) {
      osVersion = getFirstMatch(/tizen[\/\s](\d+(\.\d+)*)/i);
    }
    if (osVersion) {
      result.osversion = osVersion;
    }

    // device type extraction
    var osMajorVersion = osVersion.split('.')[0];
    if (
      tablet
      || nexusTablet
      || iosdevice == 'ipad'
      || (android && (osMajorVersion == 3 || (osMajorVersion >= 4 && !mobile)))
      || result.silk
    ) {
      result.tablet = t
    } else if (
      mobile
      || iosdevice == 'iphone'
      || iosdevice == 'ipod'
      || android
      || nexusMobile
      || result.blackberry
      || result.webos
      || result.bada
    ) {
      result.mobile = t
    }

    // Graded Browser Support
    // http://developer.yahoo.com/yui/articles/gbs
    if (result.msedge ||
      (result.msie && result.version >= 10) ||
      (result.yandexbrowser && result.version >= 15) ||
      (result.vivaldi && result.version >= 1.0) ||
      (result.chrome && result.version >= 20) ||
      (result.samsungBrowser && result.version >= 4) ||
      (result.firefox && result.version >= 20.0) ||
      (result.safari && result.version >= 6) ||
      (result.opera && result.version >= 10.0) ||
      (result.ios && result.osversion && result.osversion.split(".")[0] >= 6) ||
      (result.blackberry && result.version >= 10.1)
      || (result.chromium && result.version >= 20)
    ) {
      result.a = t;
    }
    else if ((result.msie && result.version < 10) ||
      (result.chrome && result.version < 20) ||
      (result.firefox && result.version < 20.0) ||
      (result.safari && result.version < 6) ||
      (result.opera && result.version < 10.0) ||
      (result.ios && result.osversion && result.osversion.split(".")[0] < 6)
      || (result.chromium && result.version < 20)
    ) {
      result.c = t
    } else result.x = t

    return result
  }

  var bowser = detect(typeof navigator !== 'undefined' ? navigator.userAgent || '' : '')

  bowser.test = function (browserList) {
    for (var i = 0; i < browserList.length; ++i) {
      var browserItem = browserList[i];
      if (typeof browserItem === 'string') {
        if (browserItem in bowser) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * Get version precisions count
   *
   * @example
   *   getVersionPrecision("1.10.3") // 3
   *
   * @param  {string} version
   * @return {number}
   */
  function getVersionPrecision(version) {
    return version.split(".").length;
  }

  /**
   * Array::map polyfill
   *
   * @param  {Array} arr
   * @param  {Function} iterator
   * @return {Array}
   */
  function map(arr, iterator) {
    var result = [], i;
    if (Array.prototype.map) {
      return Array.prototype.map.call(arr, iterator);
    }
    for (i = 0; i < arr.length; i++) {
      result.push(iterator(arr[i]));
    }
    return result;
  }

  /**
   * Calculate browser version weight
   *
   * @example
   *   compareVersions(['1.10.2.1',  '1.8.2.1.90'])    // 1
   *   compareVersions(['1.010.2.1', '1.09.2.1.90']);  // 1
   *   compareVersions(['1.10.2.1',  '1.10.2.1']);     // 0
   *   compareVersions(['1.10.2.1',  '1.0800.2']);     // -1
   *
   * @param  {Array<String>} versions versions to compare
   * @return {Number} comparison result
   */
  function compareVersions(versions) {
    // 1) get common precision for both versions, for example for "10.0" and "9" it should be 2
    var precision = Math.max(getVersionPrecision(versions[0]), getVersionPrecision(versions[1]));
    var chunks = map(versions, function (version) {
      var delta = precision - getVersionPrecision(version);

      // 2) "9" -> "9.0" (for precision = 2)
      version = version + new Array(delta + 1).join(".0");

      // 3) "9.0" -> ["000000000"", "000000009"]
      return map(version.split("."), function (chunk) {
        return new Array(20 - chunk.length).join("0") + chunk;
      }).reverse();
    });

    // iterate in reverse order by reversed chunks array
    while (--precision >= 0) {
      // 4) compare: "000000009" > "000000010" = false (but "9" > "10" = true)
      if (chunks[0][precision] > chunks[1][precision]) {
        return 1;
      }
      else if (chunks[0][precision] === chunks[1][precision]) {
        if (precision === 0) {
          // all version chunks are same
          return 0;
        }
      }
      else {
        return -1;
      }
    }
  }

  /**
   * Check if browser is unsupported
   *
   * @example
   *   bowser.isUnsupportedBrowser({
   *     msie: "10",
   *     firefox: "23",
   *     chrome: "29",
   *     safari: "5.1",
   *     opera: "16",
   *     phantom: "534"
   *   });
   *
   * @param  {Object}  minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */
  function isUnsupportedBrowser(minVersions, strictMode, ua) {
    var _bowser = bowser;

    // make strictMode param optional with ua param usage
    if (typeof strictMode === 'string') {
      ua = strictMode;
      strictMode = void(0);
    }

    if (strictMode === void(0)) {
      strictMode = false;
    }
    if (ua) {
      _bowser = detect(ua);
    }

    var version = "" + _bowser.version;
    for (var browser in minVersions) {
      if (minVersions.hasOwnProperty(browser)) {
        if (_bowser[browser]) {
          if (typeof minVersions[browser] !== 'string') {
            throw new Error('Browser version in the minVersion map should be a string: ' + browser + ': ' + String(minVersions));
          }

          // browser version and min supported version.
          return compareVersions([version, minVersions[browser]]) < 0;
        }
      }
    }

    return strictMode; // not found
  }

  /**
   * Check if browser is supported
   *
   * @param  {Object} minVersions map of minimal version to browser
   * @param  {Boolean} [strictMode = false] flag to return false if browser wasn't found in map
   * @param  {String}  [ua] user agent string
   * @return {Boolean}
   */
  function check(minVersions, strictMode, ua) {
    return !isUnsupportedBrowser(minVersions, strictMode, ua);
  }

  bowser.isUnsupportedBrowser = isUnsupportedBrowser;
  bowser.compareVersions = compareVersions;
  bowser.check = check;

  /*
   * Set our detect method to the main bowser object so we can
   * reuse it to test other user agents.
   * This is needed to implement future tests.
   */
  bowser._detect = detect;

  return bowser
});

/*!
 * mustache.js - Logic-less {{mustache}} templates with JavaScript
 * http://github.com/janl/mustache.js
 */
function initializeMustache(mustache) {
  var objectToString = Object.prototype.toString;
  var isArray = Array.isArray || function isArrayPolyfill (object) {
      return objectToString.call(object) === '[object Array]';
    };

  function isFunction (object) {
    return typeof object === 'function';
  }

  /**
   * More correct typeof string handling array
   * which normally returns typeof 'object'
   */
  function typeStr (obj) {
    return isArray(obj) ? 'array' : typeof obj;
  }

  function escapeRegExp (string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
  }

  /**
   * Null safe way of checking whether or not an object,
   * including its prototype, has a given property
   */
  function hasProperty (obj, propName) {
    return obj != null && typeof obj === 'object' && (propName in obj);
  }

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  var regExpTest = RegExp.prototype.test;
  function testRegExp (re, string) {
    return regExpTest.call(re, string);
  }

  var nonSpaceRe = /\S/;
  function isWhitespace (string) {
    return !testRegExp(nonSpaceRe, string);
  }

  var entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };

  function escapeHtml (string) {
    return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap (s) {
      return entityMap[s];
    });
  }

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var equalsRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   */
  function parseTemplate (template, tags) {
    if (!template)
      return [];

    var sections = [];     // Stack to hold section tokens
    var tokens = [];       // Buffer to hold the tokens
    var spaces = [];       // Indices of whitespace tokens on the current line
    var hasTag = false;    // Is there a {{tag}} on the current line?
    var nonSpace = false;  // Is there a non-space char on the current line?

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace () {
      if (hasTag && !nonSpace) {
        while (spaces.length)
          delete tokens[spaces.pop()];
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var openingTagRe, closingTagRe, closingCurlyRe;
    function compileTags (tagsToCompile) {
      if (typeof tagsToCompile === 'string')
        tagsToCompile = tagsToCompile.split(spaceRe, 2);

      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
        throw new Error('Invalid tags: ' + tagsToCompile);

      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
      closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
    }

    compileTags(tags || mustache.tags);

    var scanner = new Scanner(template);

    var start, type, value, chr, token, openSection;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(openingTagRe);

      if (value) {
        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
          } else {
            nonSpace = true;
          }

          tokens.push([ 'text', chr, start, start + 1 ]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr === '\n')
            stripSpace();
        }
      }

      // Match the opening tag.
      if (!scanner.scan(openingTagRe))
        break;

      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(equalsRe);
        scanner.scan(equalsRe);
        scanner.scanUntil(closingTagRe);
      } else if (type === '{') {
        value = scanner.scanUntil(closingCurlyRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(closingTagRe);
        type = '&';
      } else {
        value = scanner.scanUntil(closingTagRe);
      }

      // Match the closing tag.
      if (!scanner.scan(closingTagRe))
        throw new Error('Unclosed tag at ' + scanner.pos);

      token = [ type, value, start, scanner.pos ];
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        openSection = sections.pop();

        if (!openSection)
          throw new Error('Unopened section "' + value + '" at ' + start);

        if (openSection[1] !== value)
          throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        compileTags(value);
      }
    }

    // Make sure there are no open sections when we're done.
    openSection = sections.pop();

    if (openSection)
      throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

    return nestTokens(squashTokens(tokens));
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens (tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          squashedTokens.push(token);
          lastToken = token;
        }
      }
    }

    return squashedTokens;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens (tokens) {
    var nestedTokens = [];
    var collector = nestedTokens;
    var sections = [];

    var token, section;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      switch (token[0]) {
        case '#':
        case '^':
          collector.push(token);
          sections.push(token);
          collector = token[4] = [];
          break;
        case '/':
          section = sections.pop();
          section[5] = token[2];
          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
          break;
        default:
          collector.push(token);
      }
    }

    return nestedTokens;
  }

  /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */
  function Scanner (string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function eos () {
    return this.tail === '';
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function scan (re) {
    var match = this.tail.match(re);

    if (!match || match.index !== 0)
      return '';

    var string = match[0];

    this.tail = this.tail.substring(string.length);
    this.pos += string.length;

    return string;
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function scanUntil (re) {
    var index = this.tail.search(re), match;

    switch (index) {
      case -1:
        match = this.tail;
        this.tail = '';
        break;
      case 0:
        match = '';
        break;
      default:
        match = this.tail.substring(0, index);
        this.tail = this.tail.substring(index);
    }

    this.pos += match.length;

    return match;
  };

  /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */
  function Context (view, parentContext) {
    this.view = view;
    this.cache = { '.': this.view };
    this.parent = parentContext;
  }

  /**
   * Creates a new context using the given view with this context
   * as the parent.
   */
  Context.prototype.push = function push (view) {
    return new Context(view, this);
  };

  /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */
  Context.prototype.lookup = function lookup (name) {
    var cache = this.cache;

    var value;
    if (cache.hasOwnProperty(name)) {
      value = cache[name];
    } else {
      var context = this, names, index, lookupHit = false;

      while (context) {
        if (name.indexOf('.') > 0) {
          value = context.view;
          names = name.split('.');
          index = 0;

          /**
           * Using the dot notion path in `name`, we descend through the
           * nested objects.
           *
           * To be certain that the lookup has been successful, we have to
           * check if the last object in the path actually has the property
           * we are looking for. We store the result in `lookupHit`.
           *
           * This is specially necessary for when the value has been set to
           * `undefined` and we want to avoid looking up parent contexts.
           **/
          while (value != null && index < names.length) {
            if (index === names.length - 1)
              lookupHit = hasProperty(value, names[index]);

            value = value[names[index++]];
          }
        } else {
          value = context.view[name];
          lookupHit = hasProperty(context.view, name);
        }

        if (lookupHit)
          break;

        context = context.parent;
      }

      cache[name] = value;
    }

    if (isFunction(value))
      value = value.call(this.view);

    return value;
  };

  /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */
  function Writer () {
    this.cache = {};
  }

  /**
   * Clears all cached templates in this writer.
   */
  Writer.prototype.clearCache = function clearCache () {
    this.cache = {};
  };

  /**
   * Parses and caches the given `template` and returns the array of tokens
   * that is generated from the parse.
   */
  Writer.prototype.parse = function parse (template, tags) {
    var cache = this.cache;
    var tokens = cache[template];

    if (tokens == null)
      tokens = cache[template] = parseTemplate(template, tags);

    return tokens;
  };

  /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   */
  Writer.prototype.render = function render (template, view, partials) {
    var tokens = this.parse(template);
    var context = (view instanceof Context) ? view : new Context(view);
    return this.renderTokens(tokens, context, partials, template);
  };

  /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */
  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate) {
    var buffer = '';

    var token, symbol, value;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      value = undefined;
      token = tokens[i];
      symbol = token[0];

      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);
      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);
      else if (symbol === '>') value = this.renderPartial(token, context, partials, originalTemplate);
      else if (symbol === '&') value = this.unescapedValue(token, context);
      else if (symbol === 'name') value = this.escapedValue(token, context);
      else if (symbol === 'text') value = this.rawValue(token);

      if (value !== undefined)
        buffer += value;
    }

    return buffer;
  };

  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {
    var self = this;
    var buffer = '';
    var value = context.lookup(token[1]);

    // This function is used to render an arbitrary template
    // in the current context by higher-order sections.
    function subRender (template) {
      return self.render(template, context, partials);
    }

    if (!value) return;

    if (isArray(value)) {
      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
      }
    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
    } else if (isFunction(value)) {
      if (typeof originalTemplate !== 'string')
        throw new Error('Cannot use higher-order sections without the original template');

      // Extract the portion of the original template that the section contains.
      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

      if (value != null)
        buffer += value;
    } else {
      buffer += this.renderTokens(token[4], context, partials, originalTemplate);
    }
    return buffer;
  };

  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {
    var value = context.lookup(token[1]);

    // Use JavaScript's definition of falsy. Include empty arrays.
    // See https://github.com/janl/mustache.js/issues/186
    if (!value || (isArray(value) && value.length === 0))
      return this.renderTokens(token[4], context, partials, originalTemplate);
  };

  Writer.prototype.renderPartial = function renderPartial (token, context, partials) {
    if (!partials) return;

    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
    if (value != null)
      return this.renderTokens(this.parse(value), context, partials, value);
  };

  Writer.prototype.unescapedValue = function unescapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return value;
  };

  Writer.prototype.escapedValue = function escapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return mustache.escape(value);
  };

  Writer.prototype.rawValue = function rawValue (token) {
    return token[1];
  };

  mustache.name = 'mustache.js';
  mustache.version = '2.2.1';
  mustache.tags = [ '{{', '}}' ];

  // All high-level mustache.* functions use this writer.
  var defaultWriter = new Writer();

  /**
   * Clears all cached templates in the default writer.
   */
  mustache.clearCache = function clearCache () {
    return defaultWriter.clearCache();
  };

  /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */
  mustache.parse = function parse (template, tags) {
    return defaultWriter.parse(template, tags);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer.
   */
  mustache.render = function render (template, view, partials) {
    if (typeof template !== 'string') {
      throw new TypeError('Invalid template! Template should be a "string" ' +
        'but "' + typeStr(template) + '" was given as the first ' +
        'argument for mustache#render(template, view, partials)');
    }

    return defaultWriter.render(template, view, partials);
  };

  // This is here for backwards compatibility with 0.4.x.,
  /*eslint-disable */ // eslint wants camel cased function name
  mustache.to_html = function to_html (template, view, partials, send) {
    /*eslint-enable*/

    var result = mustache.render(template, view, partials);

    if (isFunction(send)) {
      send(result);
    } else {
      return result;
    }
  };

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  mustache.escape = escapeHtml;

  // Export these mainly for testing, but also for advanced usage.
  mustache.Scanner = Scanner;
  mustache.Context = Context;
  mustache.Writer = Writer;
}

/*!
 * fancyBox - jQuery Plugin
 * version: 2.1.5 (Fri, 14 Jun 2013)
 * @requires jQuery v1.6 or later
 *
 * Examples at http://fancyapps.com/fancybox/
 * License: www.fancyapps.com/fancybox/#license
 *
 * Copyright 2012 Janis Skarnelis - janis@fancyapps.com
 *
 */
function initializeSegmentifyFancybox(window, document, $, undefined) {
  "use strict";

  var H = $("html"),
      W = $(window),
      D = $(document),
      F = $.fancybox = $.sgmFancybox = function () {
        F.open.apply( this, arguments );
      },
      IE =  navigator.userAgent.match(/msie/i),
      didUpdate	= null,
      isTouch		= document.createTouch !== undefined,

      isQuery	= function(obj) {
        return obj && obj.hasOwnProperty && obj instanceof $;
      },
      isString = function(str) {
        return str && $.type(str) === "string";
      },
      isPercentage = function(str) {
        return isString(str) && str.indexOf('%') > 0;
      },
      isScrollable = function(el) {
        return (el && !(el.style.overflow && el.style.overflow === 'hidden') && ((el.clientWidth && el.scrollWidth > el.clientWidth) || (el.clientHeight && el.scrollHeight > el.clientHeight)));
      },
      getScalar = function(orig, dim) {
        var value = parseInt(orig, 10) || 0;

        if (dim && isPercentage(orig)) {
          value = F.getViewport()[ dim ] / 100 * value;
        }

        return Math.ceil(value);
      },
      getValue = function(value, dim) {
        return getScalar(value, dim) + 'px';
      };

  $.extend(F, {
    // The current version of fancyBox
    version: '2.1.5',

    defaults: {
      padding : 15,
      margin  : 20,

      width     : 800,
      height    : 600,
      minWidth  : 100,
      minHeight : 100,
      maxWidth  : 9999,
      maxHeight : 9999,
      pixelRatio: 1, // Set to 2 for retina display support

      autoSize   : true,
      autoHeight : false,
      autoWidth  : false,

      autoResize  : true,
      autoCenter  : !isTouch,
      fitToView   : true,
      aspectRatio : false,
      topRatio    : 0.5,
      leftRatio   : 0.5,

      scrolling : 'auto', // 'auto', 'yes' or 'no'
      wrapCSS   : '',

      arrows     : true,
      closeBtn   : true,
      closeClick : false,
      nextClick  : false,
      mouseWheel : true,
      autoPlay   : false,
      playSpeed  : 3000,
      preload    : 3,
      modal      : false,
      loop       : true,

      ajax  : {
        dataType : 'html',
        headers  : { 'X-fancyBox': true }
      },
      iframe : {
        scrolling : 'auto',
        preload   : true
      },
      swf : {
        wmode: 'transparent',
        allowfullscreen   : 'true',
        allowscriptaccess : 'always'
      },

      keys  : {
        next : {
          13 : 'left', // enter
          34 : 'up',   // page down
          39 : 'left', // right arrow
          40 : 'up'    // down arrow
        },
        prev : {
          8  : 'right',  // backspace
          33 : 'down',   // page up
          37 : 'right',  // left arrow
          38 : 'down'    // up arrow
        },
        close  : [27], // escape key
        play   : [32], // space - start/stop slideshow
        toggle : [70]  // letter "f" - toggle fullscreen
      },

      direction : {
        next : 'left',
        prev : 'right'
      },

      scrollOutside  : true,

      // Override some properties
      index   : 0,
      type    : null,
      href    : null,
      content : null,
      title   : null,

      // HTML templates
      tpl: {
        wrap     : '<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',
        image    : '<img class="fancybox-image" src="{href}" alt="" />',
        iframe   : '<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen' + (IE ? ' allowtransparency="true"' : '') + '></iframe>',
        error    : '<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',
        closeBtn : '<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',
        next     : '<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',
        prev     : '<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>'
      },

      // Properties for each animation type
      // Opening fancyBox
      openEffect  : 'fade', // 'elastic', 'fade' or 'none'
      openSpeed   : 250,
      openEasing  : 'swing',
      openOpacity : true,
      openMethod  : 'zoomIn',

      // Closing fancyBox
      closeEffect  : 'fade', // 'elastic', 'fade' or 'none'
      closeSpeed   : 250,
      closeEasing  : 'swing',
      closeOpacity : true,
      closeMethod  : 'zoomOut',

      // Changing next gallery item
      nextEffect : 'elastic', // 'elastic', 'fade' or 'none'
      nextSpeed  : 250,
      nextEasing : 'swing',
      nextMethod : 'changeIn',

      // Changing previous gallery item
      prevEffect : 'elastic', // 'elastic', 'fade' or 'none'
      prevSpeed  : 250,
      prevEasing : 'swing',
      prevMethod : 'changeOut',

      // Enable default helpers
      helpers : {
        overlay : true,
        title   : true
      },

      // Callbacks
      onCancel     : $.noop, // If canceling
      beforeLoad   : $.noop, // Before loading
      afterLoad    : $.noop, // After loading
      beforeShow   : $.noop, // Before changing in current item
      afterShow    : $.noop, // After opening
      beforeChange : $.noop, // Before changing gallery item
      beforeClose  : $.noop, // Before closing
      afterClose   : $.noop  // After closing
    },

    //Current state
    group    : {}, // Selected group
    opts     : {}, // Group options
    previous : null,  // Previous element
    coming   : null,  // Element being loaded
    current  : null,  // Currently loaded element
    isActive : false, // Is activated
    isOpen   : false, // Is currently open
    isOpened : false, // Have been fully opened at least once

    wrap  : null,
    skin  : null,
    outer : null,
    inner : null,

    player : {
      timer    : null,
      isActive : false
    },

    // Loaders
    ajaxLoad   : null,
    imgPreload : null,

    // Some collections
    transitions : {},
    helpers     : {},

    /*
     *	Static methods
     */

    open: function (group, opts) {
      if (!group) {
        return;
      }

      if (!$.isPlainObject(opts)) {
        opts = {};
      }

      // Close if already active
      if (false === F.close(true)) {
        return;
      }

      // Normalize group
      if (!$.isArray(group)) {
        group = isQuery(group) ? $(group).get() : [group];
      }

      // Recheck if the type of each element is `object` and set content type (image, ajax, etc)
      $.each(group, function(i, element) {
        var obj = {},
            href,
            title,
            content,
            type,
            rez,
            hrefParts,
            selector;

        if ($.type(element) === "object") {
          // Check if is DOM element
          if (element.nodeType) {
            element = $(element);
          }

          if (isQuery(element)) {
            obj = {
              href    : element.data('fancybox-href') || element.attr('href'),
              title   : element.data('fancybox-title') || element.attr('title'),
              isDom   : true,
              element : element
            };

            if ($.metadata) {
              $.extend(true, obj, element.metadata());
            }

          } else {
            obj = element;
          }
        }

        href  = opts.href  || obj.href || (isString(element) ? element : null);
        title = opts.title !== undefined ? opts.title : obj.title || '';

        content = opts.content || obj.content;
        type    = content ? 'html' : (opts.type  || obj.type);

        if (!type && obj.isDom) {
          type = element.data('fancybox-type');

          if (!type) {
            rez  = element.prop('class').match(/fancybox\.(\w+)/);
            type = rez ? rez[1] : null;
          }
        }

        if (isString(href)) {
          // Try to guess the content type
          if (!type) {
            if (F.isImage(href)) {
              type = 'image';

            } else if (F.isSWF(href)) {
              type = 'swf';

            } else if (href.charAt(0) === '#') {
              type = 'inline';

            } else if (isString(element)) {
              type    = 'html';
              content = element;
            }
          }

          // Split url into two pieces with source url and content selector, e.g,
          // "/mypage.html #my_id" will load "/mypage.html" and display element having id "my_id"
          if (type === 'ajax') {
            hrefParts = href.split(/\s+/, 2);
            href      = hrefParts.shift();
            selector  = hrefParts.shift();
          }
        }

        if (!content) {
          if (type === 'inline') {
            if (href) {
              content = $( isString(href) ? href.replace(/.*(?=#[^\s]+$)/, '') : href ); //strip for ie7

            } else if (obj.isDom) {
              content = element;
            }

          } else if (type === 'html') {
            content = href;

          } else if (!type && !href && obj.isDom) {
            type    = 'inline';
            content = element;
          }
        }

        $.extend(obj, {
          href     : href,
          type     : type,
          content  : content,
          title    : title,
          selector : selector
        });

        group[ i ] = obj;
      });

      // Extend the defaults
      F.opts = $.extend(true, {}, F.defaults, opts);

      // All options are merged recursive except keys
      if (opts.keys !== undefined) {
        F.opts.keys = opts.keys ? $.extend({}, F.defaults.keys, opts.keys) : false;
      }

      F.group = group;

      return F._start(F.opts.index);
    },

    // Cancel image loading or abort ajax request
    cancel: function () {
      var coming = F.coming;

      if (!coming || false === F.trigger('onCancel')) {
        return;
      }

      F.hideLoading();

      if (F.ajaxLoad) {
        F.ajaxLoad.abort();
      }

      F.ajaxLoad = null;

      if (F.imgPreload) {
        F.imgPreload.onload = F.imgPreload.onerror = null;
      }

      if (coming.wrap) {
        coming.wrap.stop(true, true).trigger('onReset').remove();
      }

      F.coming = null;

      // If the first item has been canceled, then clear everything
      if (!F.current) {
        F._afterZoomOut( coming );
      }
    },

    // Start closing animation if is open; remove immediately if opening/closing
    close: function (event) {
      F.cancel();

      if (false === F.trigger('beforeClose')) {
        return;
      }

      F.unbindEvents();

      if (!F.isActive) {
        return;
      }

      if (!F.isOpen || event === true) {
        $('.fancybox-wrap').stop(true).trigger('onReset').remove();

        F._afterZoomOut();

      } else {
        F.isOpen = F.isOpened = false;
        F.isClosing = true;

        $('.fancybox-item, .fancybox-nav').remove();

        F.wrap.stop(true, true).removeClass('fancybox-opened');

        F.transitions[ F.current.closeMethod ]();
      }
    },

    // Manage slideshow:
    //   $.fancybox.play(); - toggle slideshow
    //   $.fancybox.play( true ); - start
    //   $.fancybox.play( false ); - stop
    play: function ( action ) {
      var clear = function () {
            clearTimeout(F.player.timer);
          },
          set = function () {
            clear();

            if (F.current && F.player.isActive) {
              F.player.timer = setTimeout(F.next, F.current.playSpeed);
            }
          },
          stop = function () {
            clear();

            D.unbind('.player');

            F.player.isActive = false;

            F.trigger('onPlayEnd');
          },
          start = function () {
            if (F.current && (F.current.loop || F.current.index < F.group.length - 1)) {
              F.player.isActive = true;

              D.bind({
                'onCancel.player beforeClose.player' : stop,
                'onUpdate.player'   : set,
                'beforeLoad.player' : clear
              });

              set();

              F.trigger('onPlayStart');
            }
          };

      if (action === true || (!F.player.isActive && action !== false)) {
        start();
      } else {
        stop();
      }
    },

    // Navigate to next gallery item
    next: function ( direction ) {
      var current = F.current;

      if (current) {
        if (!isString(direction)) {
          direction = current.direction.next;
        }

        F.jumpto(current.index + 1, direction, 'next');
      }
    },

    // Navigate to previous gallery item
    prev: function ( direction ) {
      var current = F.current;

      if (current) {
        if (!isString(direction)) {
          direction = current.direction.prev;
        }

        F.jumpto(current.index - 1, direction, 'prev');
      }
    },

    // Navigate to gallery item by index
    jumpto: function ( index, direction, router ) {
      var current = F.current;

      if (!current) {
        return;
      }

      index = getScalar(index);

      F.direction = direction || current.direction[ (index >= current.index ? 'next' : 'prev') ];
      F.router    = router || 'jumpto';

      if (current.loop) {
        if (index < 0) {
          index = current.group.length + (index % current.group.length);
        }

        index = index % current.group.length;
      }

      if (current.group[ index ] !== undefined) {
        F.cancel();

        F._start(index);
      }
    },

    // Center inside viewport and toggle position type to fixed or absolute if needed
    reposition: function (e, onlyAbsolute) {
      var current = F.current,
          wrap    = current ? current.wrap : null,
          pos;

      if (wrap) {
        pos = F._getPosition(onlyAbsolute);

        if (e && e.type === 'scroll') {
          delete pos.position;

          wrap.stop(true, true).animate(pos, 200);

        } else {
          wrap.css(pos);

          current.pos = $.extend({}, current.dim, pos);
        }
      }
    },

    update: function (e) {
      var type = (e && e.type),
          anyway = !type || type === 'orientationchange';

      if (anyway) {
        clearTimeout(didUpdate);

        didUpdate = null;
      }

      if (!F.isOpen || didUpdate) {
        return;
      }

      didUpdate = setTimeout(function() {
        var current = F.current;

        if (!current || F.isClosing) {
          return;
        }

        F.wrap.removeClass('fancybox-tmp');

        if (anyway || type === 'load' || (type === 'resize' && current.autoResize)) {
          F._setDimension();
        }

        if (!(type === 'scroll' && current.canShrink)) {
          F.reposition(e);
        }

        F.trigger('onUpdate');

        didUpdate = null;

      }, (anyway && !isTouch ? 0 : 300));
    },

    // Shrink content to fit inside viewport or restore if resized
    toggle: function ( action ) {
      if (F.isOpen) {
        F.current.fitToView = $.type(action) === "boolean" ? action : !F.current.fitToView;

        // Help browser to restore document dimensions
        if (isTouch) {
          F.wrap.removeAttr('style').addClass('fancybox-tmp');

          F.trigger('onUpdate');
        }

        F.update();
      }
    },

    hideLoading: function () {
      D.unbind('.loading');

      $('#fancybox-segmentify-loading').remove();
    },

    showLoading: function () {
      var el, viewport;

      F.hideLoading();

      el = $('<div id="fancybox-segmentify-loading"><div></div></div>').click(F.cancel).appendTo('body');

      // If user will press the escape-button, the request will be canceled
      D.bind('keydown.loading', function(e) {
        if ((e.which || e.keyCode) === 27) {
          e.preventDefault();

          F.cancel();
        }
      });

      if (!F.defaults.fixed) {
        viewport = F.getViewport();

        el.css({
          position : 'absolute',
          top  : (viewport.h * 0.5) + viewport.y,
          left : (viewport.w * 0.5) + viewport.x
        });
      }
    },

    getViewport: function () {
      var locked = (F.current && F.current.locked) || false,
          rez    = {
            x: W.scrollLeft(),
            y: W.scrollTop()
          };

      if (locked) {
        rez.w = locked[0].clientWidth;
        rez.h = locked[0].clientHeight;

      } else {
        // See http://bugs.jquery.com/ticket/6724
        rez.w = isTouch && window.innerWidth  ? window.innerWidth  : W.width();
        rez.h = isTouch && window.innerHeight ? window.innerHeight : W.height();
      }

      return rez;
    },

    // Unbind the keyboard / clicking actions
    unbindEvents: function () {
      if (F.wrap && isQuery(F.wrap)) {
        F.wrap.unbind('.fb');
      }

      D.unbind('.fb');
      W.unbind('.fb');
    },

    bindEvents: function () {
      var current = F.current,
          keys;

      if (!current) {
        return;
      }

      // Changing document height on iOS devices triggers a 'resize' event,
      // that can change document height... repeating infinitely
      W.bind('orientationchange.fb' + (isTouch ? '' : ' resize.fb') + (current.autoCenter && !current.locked ? ' scroll.fb' : ''), F.update);

      keys = current.keys;

      if (keys) {
        D.bind('keydown.fb', function (e) {
          var code   = e.which || e.keyCode,
              target = e.target || e.srcElement;

          // Skip esc key if loading, because showLoading will cancel preloading
          if (code === 27 && F.coming) {
            return false;
          }

          // Ignore key combinations and key events within form elements
          if (!e.ctrlKey && !e.altKey && !e.shiftKey && !e.metaKey && !(target && (target.type || $(target).is('[contenteditable]')))) {
            $.each(keys, function(i, val) {
              if (current.group.length > 1 && val[ code ] !== undefined) {
                F[ i ]( val[ code ] );

                e.preventDefault();
                return false;
              }

              if ($.inArray(code, val) > -1) {
                F[ i ] ();

                e.preventDefault();
                return false;
              }
            });
          }
        });
      }

      if ($.fn.mousewheel && current.mouseWheel) {
        F.wrap.bind('mousewheel.fb', function (e, delta, deltaX, deltaY) {
          var target = e.target || null,
              parent = $(target),
              canScroll = false;

          while (parent.length) {
            if (canScroll || parent.is('.fancybox-skin') || parent.is('.fancybox-wrap')) {
              break;
            }

            canScroll = isScrollable( parent[0] );
            parent    = $(parent).parent();
          }

          if (delta !== 0 && !canScroll) {
            if (F.group.length > 1 && !current.canShrink) {
              if (deltaY > 0 || deltaX > 0) {
                F.prev( deltaY > 0 ? 'down' : 'left' );

              } else if (deltaY < 0 || deltaX < 0) {
                F.next( deltaY < 0 ? 'up' : 'right' );
              }

              e.preventDefault();
            }
          }
        });
      }
    },

    trigger: function (event, o) {
      var ret, obj = o || F.coming || F.current;

      if (!obj) {
        return;
      }

      if ($.isFunction( obj[event] )) {
        ret = obj[event].apply(obj, Array.prototype.slice.call(arguments, 1));
      }

      if (ret === false) {
        return false;
      }

      if (obj.helpers) {
        $.each(obj.helpers, function (helper, opts) {
          if (opts && F.helpers[helper] && $.isFunction(F.helpers[helper][event])) {
            F.helpers[helper][event]($.extend(true, {}, F.helpers[helper].defaults, opts), obj);
          }
        });
      }

      D.trigger(event);
    },

    isImage: function (str) {
      return isString(str) && str.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i);
    },

    isSWF: function (str) {
      return isString(str) && str.match(/\.(swf)((\?|#).*)?$/i);
    },

    _start: function (index) {
      var coming = {},
          obj,
          href,
          type,
          margin,
          padding;

      index = getScalar( index );
      obj   = F.group[ index ] || null;

      if (!obj) {
        return false;
      }

      coming = $.extend(true, {}, F.opts, obj);

      // Convert margin and padding properties to array - top, right, bottom, left
      margin  = coming.margin;
      padding = coming.padding;

      if ($.type(margin) === 'number') {
        coming.margin = [margin, margin, margin, margin];
      }

      if ($.type(padding) === 'number') {
        coming.padding = [padding, padding, padding, padding];
      }

      // 'modal' propery is just a shortcut
      if (coming.modal) {
        $.extend(true, coming, {
          closeBtn   : false,
          closeClick : false,
          nextClick  : false,
          arrows     : false,
          mouseWheel : false,
          keys       : null,
          helpers: {
            overlay : {
              closeClick : false
            }
          }
        });
      }

      // 'autoSize' property is a shortcut, too
      if (coming.autoSize) {
        coming.autoWidth = coming.autoHeight = true;
      }

      if (coming.width === 'auto') {
        coming.autoWidth = true;
      }

      if (coming.height === 'auto') {
        coming.autoHeight = true;
      }

      /*
       * Add reference to the group, so it`s possible to access from callbacks, example:
       * afterLoad : function() {
       *     this.title = 'Image ' + (this.index + 1) + ' of ' + this.group.length + (this.title ? ' - ' + this.title : '');
       * }
       */

      coming.group  = F.group;
      coming.index  = index;

      // Give a chance for callback or helpers to update coming item (type, title, etc)
      F.coming = coming;

      if (false === F.trigger('beforeLoad')) {
        F.coming = null;

        return;
      }

      type = coming.type;
      href = coming.href;

      if (!type) {
        F.coming = null;

        //If we can not determine content type then drop silently or display next/prev item if looping through gallery
        if (F.current && F.router && F.router !== 'jumpto') {
          F.current.index = index;

          return F[ F.router ]( F.direction );
        }

        return false;
      }

      F.isActive = true;

      if (type === 'image' || type === 'swf') {
        coming.autoHeight = coming.autoWidth = false;
        coming.scrolling  = 'visible';
      }

      if (type === 'image') {
        coming.aspectRatio = true;
      }

      if (type === 'iframe' && isTouch) {
        coming.scrolling = 'scroll';
      }

      // Build the neccessary markup
      coming.wrap = $(coming.tpl.wrap).addClass('fancybox-' + (isTouch ? 'mobile' : 'desktop') + ' fancybox-type-' + type + ' fancybox-tmp ' + coming.wrapCSS).appendTo( coming.parent || 'body' );

      $.extend(coming, {
        skin  : $('.fancybox-skin',  coming.wrap),
        outer : $('.fancybox-outer', coming.wrap),
        inner : $('.fancybox-inner', coming.wrap)
      });

      $.each(["Top", "Right", "Bottom", "Left"], function(i, v) {
        coming.skin.css('padding' + v, getValue(coming.padding[ i ]));
      });

      F.trigger('onReady');

      // Check before try to load; 'inline' and 'html' types need content, others - href
      if (type === 'inline' || type === 'html') {
        if (!coming.content || !coming.content.length) {
          return F._error( 'content' );
        }

      } else if (!href) {
        return F._error( 'href' );
      }

      if (type === 'image') {
        F._loadImage();

      } else if (type === 'ajax') {
        F._loadAjax();

      } else if (type === 'iframe') {
        F._loadIframe();

      } else {
        F._afterLoad();
      }
    },

    _error: function ( type ) {
      $.extend(F.coming, {
        type       : 'html',
        autoWidth  : true,
        autoHeight : true,
        minWidth   : 0,
        minHeight  : 0,
        scrolling  : 'no',
        hasError   : type,
        content    : F.coming.tpl.error
      });

      F._afterLoad();
    },

    _loadImage: function () {
      // Reset preload image so it is later possible to check "complete" property
      var img = F.imgPreload = new Image();

      img.onload = function () {
        this.onload = this.onerror = null;

        F.coming.width  = this.width / F.opts.pixelRatio;
        F.coming.height = this.height / F.opts.pixelRatio;

        F._afterLoad();
      };

      img.onerror = function () {
        this.onload = this.onerror = null;

        F._error( 'image' );
      };

      img.src = F.coming.href;

      if (img.complete !== true) {
        F.showLoading();
      }
    },

    _loadAjax: function () {
      var coming = F.coming;

      F.showLoading();

      F.ajaxLoad = $.ajax($.extend({}, coming.ajax, {
        url: coming.href,
        error: function (jqXHR, textStatus) {
          if (F.coming && textStatus !== 'abort') {
            F._error( 'ajax', jqXHR );

          } else {
            F.hideLoading();
          }
        },
        success: function (data, textStatus) {
          if (textStatus === 'success') {
            coming.content = data;

            F._afterLoad();
          }
        }
      }));
    },

    _loadIframe: function() {
      var coming = F.coming,
          iframe = $(coming.tpl.iframe.replace(/\{rnd\}/g, new Date().getTime()))
            .attr('scrolling', isTouch ? 'auto' : coming.iframe.scrolling)
            .attr('src', coming.href);

      // This helps IE
      $(coming.wrap).bind('onReset', function () {
        try {
          $(this).find('iframe').hide().attr('src', '//about:blank').end().empty();
        } catch (e) {}
      });

      if (coming.iframe.preload) {
        F.showLoading();

        iframe.one('load', function() {
          $(this).data('ready', 1);

          // iOS will lose scrolling if we resize
          if (!isTouch) {
            $(this).bind('load.fb', F.update);
          }

          // Without this trick:
          //   - iframe won't scroll on iOS devices
          //   - IE7 sometimes displays empty iframe
          $(this).parents('.fancybox-wrap').width('100%').removeClass('fancybox-tmp').show();

          F._afterLoad();
        });
      }

      coming.content = iframe.appendTo( coming.inner );

      if (!coming.iframe.preload) {
        F._afterLoad();
      }
    },

    _preloadImages: function() {
      var group   = F.group,
          current = F.current,
          len     = group.length,
          cnt     = current.preload ? Math.min(current.preload, len - 1) : 0,
          item,
          i;

      for (i = 1; i <= cnt; i += 1) {
        item = group[ (current.index + i ) % len ];

        if (item.type === 'image' && item.href) {
          new Image().src = item.href;
        }
      }
    },

    _afterLoad: function () {
      var coming   = F.coming,
          previous = F.current,
          placeholder = 'fancybox-placeholder',
          current,
          content,
          type,
          scrolling,
          href,
          embed;

      F.hideLoading();

      if (!coming || F.isActive === false) {
        return;
      }

      if (false === F.trigger('afterLoad', coming, previous)) {
        coming.wrap.stop(true).trigger('onReset').remove();

        F.coming = null;

        return;
      }

      if (previous) {
        F.trigger('beforeChange', previous);

        previous.wrap.stop(true).removeClass('fancybox-opened')
          .find('.fancybox-item, .fancybox-nav')
          .remove();
      }

      F.unbindEvents();

      current   = coming;
      content   = coming.content;
      type      = coming.type;
      scrolling = coming.scrolling;

      $.extend(F, {
        wrap  : current.wrap,
        skin  : current.skin,
        outer : current.outer,
        inner : current.inner,
        current  : current,
        previous : previous
      });

      href = current.href;

      switch (type) {
        case 'inline':
        case 'ajax':
        case 'html':
          if (current.selector) {
            content = $('<div>').html(content).find(current.selector);

          } else if (isQuery(content)) {
            if (!content.data(placeholder)) {
              content.data(placeholder, $('<div class="' + placeholder + '"></div>').insertAfter( content ).hide() );
            }

            content = content.show().detach();

            current.wrap.bind('onReset', function () {
              if ($(this).find(content).length) {
                content.hide().replaceAll( content.data(placeholder) ).data(placeholder, false);
              }
            });
          }
          break;

        case 'image':
          content = current.tpl.image.replace('{href}', href);
          break;

        case 'swf':
          content = '<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="' + href + '"></param>';
          embed   = '';

          $.each(current.swf, function(name, val) {
            content += '<param name="' + name + '" value="' + val + '"></param>';
            embed   += ' ' + name + '="' + val + '"';
          });

          content += '<embed src="' + href + '" type="application/x-shockwave-flash" width="100%" height="100%"' + embed + '></embed></object>';
          break;
      }

      if (!(isQuery(content) && content.parent().is(current.inner))) {
        current.inner.append( content );
      }

      // Give a chance for helpers or callbacks to update elements
      F.trigger('beforeShow');

      // Set scrolling before calculating dimensions
      current.inner.css('overflow', scrolling === 'yes' ? 'scroll' : (scrolling === 'no' ? 'hidden' : scrolling));

      // Set initial dimensions and start position
      F._setDimension();

      F.reposition();

      F.isOpen = false;
      F.coming = null;

      F.bindEvents();

      if (!F.isOpened) {
        $('.fancybox-wrap').not( current.wrap ).stop(true).trigger('onReset').remove();

      } else if (previous.prevMethod) {
        F.transitions[ previous.prevMethod ]();
      }

      F.transitions[ F.isOpened ? current.nextMethod : current.openMethod ]();

      F._preloadImages();
    },

    _setDimension: function () {
      var viewport   = F.getViewport(),
          steps      = 0,
          canShrink  = false,
          canExpand  = false,
          wrap       = F.wrap,
          skin       = F.skin,
          inner      = F.inner,
          current    = F.current,
          width      = current.width,
          height     = current.height,
          minWidth   = current.minWidth,
          minHeight  = current.minHeight,
          maxWidth   = current.maxWidth,
          maxHeight  = current.maxHeight,
          scrolling  = current.scrolling,
          scrollOut  = current.scrollOutside ? current.scrollbarWidth : 0,
          margin     = current.margin,
          wMargin    = getScalar(margin[1] + margin[3]),
          hMargin    = getScalar(margin[0] + margin[2]),
          wPadding,
          hPadding,
          wSpace,
          hSpace,
          origWidth,
          origHeight,
          origMaxWidth,
          origMaxHeight,
          ratio,
          width_,
          height_,
          maxWidth_,
          maxHeight_,
          iframe,
          body;

      // Reset dimensions so we could re-check actual size
      wrap.add(skin).add(inner).width('auto').height('auto').removeClass('fancybox-tmp');

      wPadding = getScalar(skin.outerWidth(true)  - skin.width());
      hPadding = getScalar(skin.outerHeight(true) - skin.height());

      // Any space between content and viewport (margin, padding, border, title)
      wSpace = wMargin + wPadding;
      hSpace = hMargin + hPadding;

      origWidth  = isPercentage(width)  ? (viewport.w - wSpace) * getScalar(width)  / 100 : width;
      origHeight = isPercentage(height) ? (viewport.h - hSpace) * getScalar(height) / 100 : height;

      if (current.type === 'iframe') {
        iframe = current.content;

        if (current.autoHeight && iframe.data('ready') === 1) {
          try {
            if (iframe[0].contentWindow.document.location) {
              inner.width( origWidth ).height(9999);

              body = iframe.contents().find('body');

              if (scrollOut) {
                body.css('overflow-x', 'hidden');
              }

              origHeight = body.outerHeight(true);
            }

          } catch (e) {}
        }

      } else if (current.autoWidth || current.autoHeight) {
        inner.addClass( 'fancybox-tmp' );

        // Set width or height in case we need to calculate only one dimension
        if (!current.autoWidth) {
          inner.width( origWidth );
        }

        if (!current.autoHeight) {
          inner.height( origHeight );
        }

        if (current.autoWidth) {
          origWidth = inner.width();
        }

        if (current.autoHeight) {
          origHeight = inner.height();
        }

        inner.removeClass( 'fancybox-tmp' );
      }

      width  = getScalar( origWidth );
      height = getScalar( origHeight );

      ratio  = origWidth / origHeight;

      // Calculations for the content
      minWidth  = getScalar(isPercentage(minWidth) ? getScalar(minWidth, 'w') - wSpace : minWidth);
      maxWidth  = getScalar(isPercentage(maxWidth) ? getScalar(maxWidth, 'w') - wSpace : maxWidth);

      minHeight = getScalar(isPercentage(minHeight) ? getScalar(minHeight, 'h') - hSpace : minHeight);
      maxHeight = getScalar(isPercentage(maxHeight) ? getScalar(maxHeight, 'h') - hSpace : maxHeight);

      // These will be used to determine if wrap can fit in the viewport
      origMaxWidth  = maxWidth;
      origMaxHeight = maxHeight;

      if (current.fitToView) {
        maxWidth  = Math.min(viewport.w - wSpace, maxWidth);
        maxHeight = Math.min(viewport.h - hSpace, maxHeight);
      }

      maxWidth_  = viewport.w - wMargin;
      maxHeight_ = viewport.h - hMargin;

      if (current.aspectRatio) {
        if (width > maxWidth) {
          width  = maxWidth;
          height = getScalar(width / ratio);
        }

        if (height > maxHeight) {
          height = maxHeight;
          width  = getScalar(height * ratio);
        }

        if (width < minWidth) {
          width  = minWidth;
          height = getScalar(width / ratio);
        }

        if (height < minHeight) {
          height = minHeight;
          width  = getScalar(height * ratio);
        }

      } else {
        width = Math.max(minWidth, Math.min(width, maxWidth));

        if (current.autoHeight && current.type !== 'iframe') {
          inner.width( width );

          height = inner.height();
        }

        height = Math.max(minHeight, Math.min(height, maxHeight));
      }

      // Try to fit inside viewport (including the title)
      if (current.fitToView) {
        inner.width( width ).height( height );

        wrap.width( width + wPadding );
        width_  = wrap.width();

        // Real wrap dimensions
        height_ = wrap.height();

        if (current.aspectRatio) {
          while ((width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight) {
            if (steps++ > 19) {
              break;
            }

            height = Math.max(minHeight, Math.min(maxHeight, height - 10));
            width  = getScalar(height * ratio);

            if (width < minWidth) {
              width  = minWidth;
              height = getScalar(width / ratio);
            }

            if (width > maxWidth) {
              width  = maxWidth;
              height = getScalar(width / ratio);
            }

            inner.width( width ).height( height );

            wrap.width( width + wPadding );

            width_  = wrap.width();
            height_ = wrap.height();
          }

        } else {
          width  = Math.max(minWidth,  Math.min(width,  width  - (width_  - maxWidth_)));
          height = Math.max(minHeight, Math.min(height, height - (height_ - maxHeight_)));
        }
      }

      if (scrollOut && scrolling === 'auto' && height < origHeight && (width + wPadding + scrollOut) < maxWidth_) {
        width += scrollOut;
      }

      inner.width( width ).height( height );

      wrap.width( width + wPadding );

      width_  = wrap.width();
      height_ = wrap.height();

      canShrink = (width_ > maxWidth_ || height_ > maxHeight_) && width > minWidth && height > minHeight;
      canExpand = current.aspectRatio ? (width < origMaxWidth && height < origMaxHeight && width < origWidth && height < origHeight) : ((width < origMaxWidth || height < origMaxHeight) && (width < origWidth || height < origHeight));

      $.extend(current, {
        dim : {
          width	: getValue( width_ ),
          height	: getValue( height_ )
        },
        origWidth  : origWidth,
        origHeight : origHeight,
        canShrink  : canShrink,
        canExpand  : canExpand,
        wPadding   : wPadding,
        hPadding   : hPadding,
        wrapSpace  : height_ - skin.outerHeight(true),
        skinSpace  : skin.height() - height
      });

      if (!iframe && current.autoHeight && height > minHeight && height < maxHeight && !canExpand) {
        inner.height('auto');
      }
    },

    _getPosition: function (onlyAbsolute) {
      var current  = F.current,
          viewport = F.getViewport(),
          margin   = current.margin,
          width    = F.wrap.width()  + margin[1] + margin[3],
          height   = F.wrap.height() + margin[0] + margin[2],
          rez      = {
            position: 'absolute',
            top  : margin[0],
            left : margin[3]
          };

      if (current.autoCenter && current.fixed && !onlyAbsolute && height <= viewport.h && width <= viewport.w) {
        rez.position = 'fixed';

      } else if (!current.locked) {
        rez.top  += viewport.y;
        rez.left += viewport.x;
      }

      rez.top  = getValue(Math.max(rez.top,  rez.top  + ((viewport.h - height) * current.topRatio)));
      rez.left = getValue(Math.max(rez.left, rez.left + ((viewport.w - width)  * current.leftRatio)));

      return rez;
    },

    _afterZoomIn: function () {
      var current = F.current;

      if (!current) {
        return;
      }

      F.isOpen = F.isOpened = true;

      F.wrap.css('overflow', 'visible').addClass('fancybox-opened');

      F.update();

      // Assign a click event
      if ( current.closeClick || (current.nextClick && F.group.length > 1) ) {
        F.inner.css('cursor', 'pointer').bind('click.fb', function(e) {
          if (!$(e.target).is('a') && !$(e.target).parent().is('a')) {
            e.preventDefault();

            F[ current.closeClick ? 'close' : 'next' ]();
          }
        });
      }

      // Create a close button
      if (current.closeBtn) {
        $(current.tpl.closeBtn).appendTo(F.skin).bind('click.fb', function(e) {
          e.preventDefault();

          F.close();
        });
      }

      // Create navigation arrows
      if (current.arrows && F.group.length > 1) {
        if (current.loop || current.index > 0) {
          $(current.tpl.prev).appendTo(F.outer).bind('click.fb', F.prev);
        }

        if (current.loop || current.index < F.group.length - 1) {
          $(current.tpl.next).appendTo(F.outer).bind('click.fb', F.next);
        }
      }

      F.trigger('afterShow');

      // Stop the slideshow if this is the last item
      if (!current.loop && current.index === current.group.length - 1) {
        F.play( false );

      } else if (F.opts.autoPlay && !F.player.isActive) {
        F.opts.autoPlay = false;

        F.play();
      }
    },

    _afterZoomOut: function ( obj ) {
      obj = obj || F.current;

      $('.fancybox-wrap').trigger('onReset').remove();

      $.extend(F, {
        group  : {},
        opts   : {},
        router : false,
        current   : null,
        isActive  : false,
        isOpened  : false,
        isOpen    : false,
        isClosing : false,
        wrap   : null,
        skin   : null,
        outer  : null,
        inner  : null
      });

      F.trigger('afterClose', obj);
    }
  });

  /*
   *	Default transitions
   */

  F.transitions = {
    getOrigPosition: function () {
      var current  = F.current,
          element  = current.element,
          orig     = current.orig,
          pos      = {},
          width    = 50,
          height   = 50,
          hPadding = current.hPadding,
          wPadding = current.wPadding,
          viewport = F.getViewport();

      if (!orig && current.isDom && element.is(':visible')) {
        orig = element.find('img:first');

        if (!orig.length) {
          orig = element;
        }
      }

      if (isQuery(orig)) {
        pos = orig.offset();

        if (orig.is('img')) {
          width  = orig.outerWidth();
          height = orig.outerHeight();
        }

      } else {
        pos.top  = viewport.y + (viewport.h - height) * current.topRatio;
        pos.left = viewport.x + (viewport.w - width)  * current.leftRatio;
      }

      if (F.wrap.css('position') === 'fixed' || current.locked) {
        pos.top  -= viewport.y;
        pos.left -= viewport.x;
      }

      pos = {
        top     : getValue(pos.top  - hPadding * current.topRatio),
        left    : getValue(pos.left - wPadding * current.leftRatio),
        width   : getValue(width  + wPadding),
        height  : getValue(height + hPadding)
      };

      return pos;
    },

    step: function (now, fx) {
      var ratio,
          padding,
          value,
          prop       = fx.prop,
          current    = F.current,
          wrapSpace  = current.wrapSpace,
          skinSpace  = current.skinSpace;

      if (prop === 'width' || prop === 'height') {
        ratio = fx.end === fx.start ? 1 : (now - fx.start) / (fx.end - fx.start);

        if (F.isClosing) {
          ratio = 1 - ratio;
        }

        padding = prop === 'width' ? current.wPadding : current.hPadding;
        value   = now - padding;

        F.skin[ prop ](  getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) ) );
        F.inner[ prop ]( getScalar( prop === 'width' ?  value : value - (wrapSpace * ratio) - (skinSpace * ratio) ) );
      }
    },

    zoomIn: function () {
      var current  = F.current,
          startPos = current.pos,
          effect   = current.openEffect,
          elastic  = effect === 'elastic',
          endPos   = $.extend({opacity : 1}, startPos);

      // Remove "position" property that breaks older IE
      delete endPos.position;

      if (elastic) {
        startPos = this.getOrigPosition();

        if (current.openOpacity) {
          startPos.opacity = 0.1;
        }

      } else if (effect === 'fade') {
        startPos.opacity = 0.1;
      }

      F.wrap.css(startPos).animate(endPos, {
        duration : effect === 'none' ? 0 : current.openSpeed,
        easing   : current.openEasing,
        step     : elastic ? this.step : null,
        complete : F._afterZoomIn
      });
    },

    zoomOut: function () {
      var current  = F.current,
          effect   = current.closeEffect,
          elastic  = effect === 'elastic',
          endPos   = {opacity : 0.1};

      if (elastic) {
        endPos = this.getOrigPosition();

        if (current.closeOpacity) {
          endPos.opacity = 0.1;
        }
      }

      F.wrap.animate(endPos, {
        duration : effect === 'none' ? 0 : current.closeSpeed,
        easing   : current.closeEasing,
        step     : elastic ? this.step : null,
        complete : F._afterZoomOut
      });
    },

    changeIn: function () {
      var current   = F.current,
          effect    = current.nextEffect,
          startPos  = current.pos,
          endPos    = { opacity : 1 },
          direction = F.direction,
          distance  = 200,
          field;

      startPos.opacity = 0.1;

      if (effect === 'elastic') {
        field = direction === 'down' || direction === 'up' ? 'top' : 'left';

        if (direction === 'down' || direction === 'right') {
          startPos[ field ] = getValue(getScalar(startPos[ field ]) - distance);
          endPos[ field ]   = '+=' + distance + 'px';

        } else {
          startPos[ field ] = getValue(getScalar(startPos[ field ]) + distance);
          endPos[ field ]   = '-=' + distance + 'px';
        }
      }

      // Workaround for http://bugs.jquery.com/ticket/12273
      if (effect === 'none') {
        F._afterZoomIn();

      } else {
        F.wrap.css(startPos).animate(endPos, {
          duration : current.nextSpeed,
          easing   : current.nextEasing,
          complete : F._afterZoomIn
        });
      }
    },

    changeOut: function () {
      var previous  = F.previous,
          effect    = previous.prevEffect,
          endPos    = { opacity : 0.1 },
          direction = F.direction,
          distance  = 200;

      if (effect === 'elastic') {
        endPos[ direction === 'down' || direction === 'up' ? 'top' : 'left' ] = ( direction === 'up' || direction === 'left' ? '-' : '+' ) + '=' + distance + 'px';
      }

      previous.wrap.animate(endPos, {
        duration : effect === 'none' ? 0 : previous.prevSpeed,
        easing   : previous.prevEasing,
        complete : function () {
          $(this).trigger('onReset').remove();
        }
      });
    }
  };

  /*
   *	Overlay helper
   */

  F.helpers.overlay = {
    defaults : {
      closeClick : true,      // if true, fancyBox will be closed when user clicks on the overlay
      speedOut   : 200,       // duration of fadeOut animation
      showEarly  : true,      // indicates if should be opened immediately or wait until the content is ready
      css        : {},        // custom CSS properties
      locked     : !isTouch,  // if true, the content will be locked into overlay
      fixed      : true       // if false, the overlay CSS position property will not be set to "fixed"
    },

    overlay : null,      // current handle
    fixed   : false,     // indicates if the overlay has position "fixed"
    el      : $('html'), // element that contains "the lock"

    // Public methods
    create : function(opts) {
      opts = $.extend({}, this.defaults, opts);

      if (this.overlay) {
        this.close();
      }

      this.overlay = $('<div class="fancybox-segmentify-overlay"></div>').appendTo( F.coming ? F.coming.parent : opts.parent );
      this.fixed   = false;

      if (opts.fixed && F.defaults.fixed) {
        this.overlay.addClass('fancybox-segmentify-overlay-fixed');

        this.fixed = true;
      }
    },

    open : function(opts) {
      var that = this;

      opts = $.extend({}, this.defaults, opts);

      if (this.overlay) {
        this.overlay.unbind('.overlay').width('auto').height('auto');

      } else {
        this.create(opts);
      }

      if (!this.fixed) {
        W.bind('resize.overlay', $.proxy( this.update, this) );

        this.update();
      }

      if (opts.closeClick) {
        this.overlay.bind('click.overlay', function(e) {
          if ($(e.target).hasClass('fancybox-segmentify-overlay')) {
            if (F.isActive) {
              F.close();
            } else {
              that.close();
            }

            return false;
          }
        });
      }

      this.overlay.css( opts.css ).show();
    },

    close : function() {
      var scrollV, scrollH;

      W.unbind('resize.overlay');

      if (this.el.hasClass('fancybox-segmentify-lock')) {
        $('.fancybox-segmentify-margin').removeClass('fancybox-segmentify-margin');

        scrollV = W.scrollTop();
        scrollH = W.scrollLeft();

        this.el.removeClass('fancybox-segmentify-lock');

        W.scrollTop( scrollV );
        W.scrollLeft( scrollH );
      }

      $('.fancybox-segmentify-overlay').remove().hide();

      $.extend(this, {
        overlay : null,
        fixed   : false
      });
    },

    // Private, callbacks

    update : function () {
      var width = '100%', offsetWidth;

      // Reset width/height so it will not mess
      this.overlay.width(width).height('100%');

      // jQuery does not return reliable result for IE
      if (IE) {
        offsetWidth = Math.max(document.documentElement.offsetWidth, document.body.offsetWidth);

        if (D.width() > offsetWidth) {
          width = D.width();
        }

      } else if (D.width() > W.width()) {
        width = D.width();
      }

      this.overlay.width(width).height(D.height());
    },

    // This is where we can manipulate DOM, because later it would cause iframes to reload
    onReady : function (opts, obj) {
      var overlay = this.overlay;

      $('.fancybox-segmentify-overlay').stop(true, true);

      if (!overlay) {
        this.create(opts);
      }

      if (opts.locked && this.fixed && obj.fixed) {
        if (!overlay) {
          this.margin = D.height() > W.height() ? $('html').css('margin-right').replace("px", "") : false;
        }

        obj.locked = this.overlay.append( obj.wrap );
        obj.fixed  = false;
      }

      if (opts.showEarly === true) {
        this.beforeShow.apply(this, arguments);
      }
    },

    beforeShow : function(opts, obj) {
      var scrollV, scrollH;

      if (obj.locked) {
        if (this.margin !== false) {
          $('*').filter(function(){
            return ($(this).css('position') === 'fixed' && !$(this).hasClass("fancybox-segmentify-overlay") && !$(this).hasClass("fancybox-wrap") );
          }).addClass('fancybox-segmentify-margin');

          this.el.addClass('fancybox-segmentify-margin');
        }

        scrollV = W.scrollTop();
        scrollH = W.scrollLeft();

        this.el.addClass('fancybox-segmentify-lock');

        W.scrollTop( scrollV );
        W.scrollLeft( scrollH );
      }

      this.open(opts);
    },

    onUpdate : function() {
      if (!this.fixed) {
        this.update();
      }
    },

    afterClose: function (opts) {
      // Remove overlay if exists and fancyBox is not opening
      // (e.g., it is not being open using afterClose callback)
      //if (this.overlay && !F.isActive) {
      if (this.overlay && !F.coming) {
        this.overlay.fadeOut(opts.speedOut, $.proxy( this.close, this ));
      }
    }
  };

  /*
   *	Title helper
   */

  F.helpers.title = {
    defaults : {
      type     : 'float', // 'float', 'inside', 'outside' or 'over',
      position : 'bottom' // 'top' or 'bottom'
    },

    beforeShow: function (opts) {
      var current = F.current,
          text    = current.title,
          type    = opts.type,
          title,
          target;

      if ($.isFunction(text)) {
        text = text.call(current.element, current);
      }

      if (!isString(text) || $.trim(text) === '') {
        return;
      }

      title = $('<div class="fancybox-title fancybox-title-' + type + '-wrap">' + text + '</div>');

      switch (type) {
        case 'inside':
          target = F.skin;
          break;

        case 'outside':
          target = F.wrap;
          break;

        case 'over':
          target = F.inner;
          break;

        default: // 'float'
          target = F.skin;

          title.appendTo('body');

          if (IE) {
            title.width( title.width() );
          }

          title.wrapInner('<span class="child"></span>');

          //Increase bottom margin so this title will also fit into viewport
          F.current.margin[2] += Math.abs( getScalar(title.css('margin-bottom')) );
          break;
      }

      title[ (opts.position === 'top' ? 'prependTo'  : 'appendTo') ](target);
    }
  };

  // jQuery plugin initialization
  $.fn.fancybox = $.fn.sgmFancybox = function (options) {
    var index,
        that     = $(this),
        selector = this.selector || '',
        run      = function(e) {
          var what = $(this).blur(), idx = index, relType, relVal;

          if (!(e.ctrlKey || e.altKey || e.shiftKey || e.metaKey) && !what.is('.fancybox-wrap')) {
            relType = options.groupAttr || 'data-fancybox-group';
            relVal  = what.attr(relType);

            if (!relVal) {
              relType = 'rel';
              relVal  = what.get(0)[ relType ];
            }

            if (relVal && relVal !== '' && relVal !== 'nofollow') {
              what = selector.length ? $(selector) : that;
              what = what.filter('[' + relType + '="' + relVal + '"]');
              idx  = what.index(this);
            }

            options.index = idx;

            // Stop an event from bubbling if everything is fine
            if (F.open(what, options) !== false) {
              e.preventDefault();
            }
          }
        };

    options = options || {};
    index   = options.index || 0;

    if (!selector || options.live === false) {
      that.unbind('click.fb-start').bind('click.fb-start', run);

    } else {
      D.undelegate(selector, 'click.fb-start').delegate(selector + ":not('.fancybox-item, .fancybox-nav')", 'click.fb-start', run);
    }

    this.filter('[data-fancybox-start=1]').trigger('click');

    return this;
  };

  // Tests that need a body at doc ready
  D.ready(function() {
    var w1, w2;

    if ( $.scrollbarWidth === undefined ) {
      // http://benalman.com/projects/jquery-misc-plugins/#scrollbarwidth
      $.scrollbarWidth = function() {
        var parent = $('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo('body'),
            child  = parent.children(),
            width  = child.innerWidth() - child.height( 99 ).innerWidth();

        parent.remove();

        return width;
      };
    }

    if ( $.support.fixedPosition === undefined ) {
      $.support.fixedPosition = (function() {
        var elem  = $('<div style="position:fixed;top:20px;"></div>').appendTo('body'),
            fixed = ( elem[0].offsetTop === 20 || elem[0].offsetTop === 15 );

        elem.remove();

        return fixed;
      }());
    }

    $.extend(F.defaults, {
      scrollbarWidth : $.scrollbarWidth(),
      fixed  : $.support.fixedPosition,
      parent : $('body')
    });

    //Get real width of page scroll-bar
    w1 = $(window).width();

    H.addClass('fancybox-segmentify-lock-test');

    w2 = $(window).width();

    H.removeClass('fancybox-segmentify-lock-test');

    $("<style type='text/css'>.fancybox-segmentify-margin{margin-right:" + (w2 - w1) + "px;}</style>").appendTo("head");
  });

  $.fancybox.defaults.nextEffect = 'fade';
  $.fancybox.defaults.prevEffect = 'fade';
  $.fancybox.defaults.padding = 0;
  $.fancybox.defaults.margin = 15;
  $.fancybox.defaults.tpl.wrap = '<div class="fancybox-segmentify" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>';
  $.fancybox.defaults.helpers.title = null;
}

/* Segmentify Initializer */
(function () {
  var _SgmntfY_ = window['_SgmntfY_'] = {
    // log levels
    LOG_LEVELS: {
      SILENT: 0,
      ERROR: 1,
      WARN: 2,
      INFO: 3,
      DEBUG: 4
    },
    // state variables
    _variables: {
      jq: window['SegmentifyjQuery'] || null,
      mustache: null,
      domain: window['SegmentifyDomain'] || window.location.hostname,
      ua: {
        agentString: window.navigator.userAgent,
        type: null,
        name: null,
        version: null,
        os: null
      },
      userStorageKey: "_sgf_user_id",
      sessionStorageKey: "_sgf_session_id",
      testMode: '_sgf_test_mode',
      storage: {
        viewedProducts: {key: "_sgf_viewed_products", local: false},
        viewedCategories: {key: "_sgf_viewed_categories", local: false},
        clickedProducts: {key: "_sgf_clicked_products", local: false},
        activeCampaigns: {key: "_sgf_viewed_campaigns", local: false},
        delayedActions: {key: "_sgf_delayed_actions", local: true},
        retryQueue: {key: "_sgf_rq", local: true},
        activeOfflines: {key: '_sgf_viewed_offlines', local: false},
        extensionStatus: {key: 'segmentifyExtension', local: true},
        clickedBanners: {key: '_sgf_clicked_banners', local: false},
        nextPageQueue: {key: '_sgf_npq', local: true}
      },
      logLevel: 'ERROR',
      segmentifyObj: null,
      recommendedProducts: [],
      waitingKeys: false,
      apiKey: null,
      initializeFancybox: true,
      skipProductDetail: {
        device: [] // if current device is member of given list, don't send product detail
      },
      offerRecommendedProducts: false,
      runTimer: null,
      initTimer: null,
      initTryCount: 0,
      initTryLimit: 50,
      isUnload: false,
      constants: {
        frequency: 100, // check for new events for every 100 milliseconds
        redirectDelay: 1000, // minimum amount of delay before redirect
        retryLimit: 3, // number of tries for sending requests to engine, after limit is reached, event is discarded
        eventTimeout: 10, // timeout in seconds for sending an event
        viewedProductsLimit: 50, // number of last viewed products to store
        viewedCategoriesLimit: 25, // number of last viewed categories to store
        clickedProductsLimit: 62, // number of clicked products to store
        clickedBannersLimit: 20, // number of clicked banners to store
        smartRecommendationSourceLimit: 5 // number of items to be sent for smart recommendation at page view, if zero none will be set
      },
      ga: {
        enabled: false
      },
      requiredParams: {
        PAGE_VIEW: [],
        PRODUCT_VIEW: ["productId"],
        INTERNAL_PRODUCT: ["productId"],
        BASKET_OPERATIONS: ["productId", "basketId", "step"],
        CHECKOUT: ["totalPrice", "basketId", "step"],
        USER_OPERATIONS: ["step"],
        FORM: ["formName", "fields"],
        CUSTOM_EVENT: ["type"],
        INTERACTION: ["type"],
        CATEGORY_OPERATIONS: ['type'],
        BANNER_OPERATIONS: ['type', 'title', 'group', 'order'],
        BANNER_GROUP_VIEW: ['group'],
        INTERNAL_BANNER_GROUP: ['group'],
        USER_CHANGE: ['oldUserId']
      },
      optionalParams: {
        PAGE_VIEW: ["category", "subCategory"],
        PRODUCT_VIEW: ["title", "url", "mUrl", "image", "imageXS", "imageS", "imageM", "imageL", "imageXL", "additionalImages", "category", "categories", "price", "oldPrice", "currency", "lastUpdateTime", "inStock", "brand", "gender", "labels", "sizes", "colors", "publishTime", "fromStore", "source", "noUpdate", "productUrl", "activeBanners"],
        INTERNAL_PRODUCT: ["title", "url", "mUrl", "image", "category", "categories", "price", "oldPrice", "currency", "lastUpdateTime", "inStock", "brand", "gender", "labels", "sizes", "colors", "publishTime", "fromStore", "source"],
        BASKET_OPERATIONS: ["price", "currency", "quantity", "instanceIds", "fromStore", "activeBanners"],
        CHECKOUT: ["currency", "productList", "orderNo", "activeBanners", "cartUrl"],
        USER_OPERATIONS: ["username", "fullName", "email", "phone", "gender", "age", "birthdate", "segments", "memberSince", "service", "isRegistered", "isLogin", "location", "emailNtf", "custom"],
        FORM: [],
        CUSTOM_EVENT: [],
        INTERACTION: ["interactionId", "instanceId"],
        CATEGORY_OPERATIONS: ['productIds'],
        BANNER_OPERATIONS: ['productId', 'category', "brand", "label"],
        BANNER_GROUP_VIEW: [],
        INTERNAL_BANNER_GROUP: ['banners'],
        USER_CHANGE: []
      },
      segmentifyApiUrl: "//rest.segmentify.com/",
      segmentifyCDNUrl: "//cdn.segmentify.com/",
      jQueryUrl: "//ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js",
      dataLayer: 'sgfLayer',
      consumeDataLayer: true
    },
    // Data Loaders
    _loadJavascript: function (url, async, onload) {
      // Load the script
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.async = async;
      if (onload && typeof onload === 'function') {
        if (typeof script.onreadystatechange !== 'undefined') script.onreadystatechange = function () {
          if (this.readyState == 'loaded' || this.readyState == 'complete') {
            onload();
            script.onreadystatechange = null;
          }
        };
        else script.onload = onload;
      }
      script.src = url;
      document.getElementsByTagName('head')[0].appendChild(script);
      return script;
    },
    _loadCSS: function (url, onload) {
      // Load css file
      var link = document.createElement('link');
      link.type = 'text/css';
      link.rel = 'stylesheet';
      link.media = 'screen';
      if (onload && typeof onload === 'function') {
        if (typeof link.onreadystatechange !== 'undefined') link.onreadystatechange = function () {
          if (this.readyState == 'loaded' || this.readyState == 'complete') {
            onload();
            link.onreadystatechange = null;
          }
        };
        else link.onload = onload;
      }
      link.href = url;
      document.getElementsByTagName('head')[0].appendChild(link);
      return link;
    },
    // response actions
    _actions: {
      _notificationWindow: function (params) {
        if (!_SgmntfY_._variables.initializeFancybox) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Fancybox not initialized, not opening popup!');
          return;
        }
        var topRatio = 0.5;
        var leftRatio = 0.5;
        var title = params.notificationTitle;
        var javascriptCode = params.javascriptCode ? params.javascriptCode : null;
        var cssCode = params.cssCode ? params.cssCode : null;
        var beforeShow = params.beforeShow || function () {};
        switch (params["windowPosition"]) {
          case 'top':
            topRatio = 0;
            break;
          case 'bottom':
            topRatio = 1;
            break;
          case 'left':
            leftRatio = 0;
            break;
          case 'right':
            leftRatio = 1;
            break;
          case 'top-left':
            leftRatio = 0;
            topRatio = 0;
            break;
          case 'top-right':
            leftRatio = 1;
            topRatio = 0;
            break;
          case 'bottom-left':
            leftRatio = 0;
            topRatio = 1;
            break;
          case 'bottom-right':
            leftRatio = 1;
            topRatio = 1;
            break;
        }

        var notificationBody = _SgmntfY_._getJq()('<div class="fancybox-body" />');
        if (params.html instanceof _SgmntfY_._getJq()) notificationBody.append(params.html);
        else notificationBody.html(params.html);
        var button_overlay = _SgmntfY_._getJq()('<div class="notification-buttons" />').appendTo(notificationBody);
        var buttons = params.buttons || [];
        var redirectFn = function (redirectUrl, newWindow) {
          _SgmntfY_._getJq().sgmFancybox.showLoading();
          var actualRedirectFn = function (redirectUrl, target) {
            _SgmntfY_._getJq().sgmFancybox.sendReject = false;
            window.open(redirectUrl, target);
            _SgmntfY_._getJq().sgmFancybox.close();
            _SgmntfY_._getJq().sgmFancybox.hideLoading();
          };
          if (newWindow === 'true' || newWindow === true) actualRedirectFn(redirectUrl, "_blank");
          else setTimeout(function () {
            actualRedirectFn(redirectUrl, "_self");
          }, _SgmntfY_._variables.constants.redirectDelay)
        };
        for (var i = 0; i < buttons.length; i++) {
          _SgmntfY_._getJq()('<button data-newWindow="' + buttons[i].newWindow + '" data-target="' + buttons[i].buttonUrl + '" class="fancybox-button ' + buttons[i].buttonColor + '">' + buttons[i].buttonTitle + '</button>').click(function () {
            _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Notification Window button click for actionId: ' + params["actionId"]);
            _SgmntfY_._variables.segmentifyObj("event:interaction", {
              type: "click",
              interactionId: _SgmntfY_._getJq()(this).text(),
              instanceId: params["instanceId"]
            });
            redirectFn(_SgmntfY_._getJq()(this).data('target'), _SgmntfY_._getJq()(this).data('newwindow'));
          }).appendTo(button_overlay);
        }
        if (params.windowStyle === 'seamless') {
          if (title) _SgmntfY_._getJq()('<div class="overlay-area-title" ><span>' + title + '</span></div>').appendTo(notificationBody);
          button_overlay.removeClass("notification-buttons").addClass("overlay-area-buttons").addClass("right");
          title = null;
        }

        // open pop-up
        var openFancyBoxWindow = function () {
          if (typeof _SgmntfY_._getJq().sgmFancybox != 'function') {
            setTimeout(openFancyBoxWindow, _SgmntfY_._variables.constants.frequency);
          }
          else {
            _SgmntfY_._getJq().sgmFancybox.close(true);
            _SgmntfY_._getJq().sgmFancybox.sendReject = true;
            var fancyboxParams = {
              minHeight: 10,
              width: params.width || 'auto',
              height: params.height || 'auto',
              autoSize: false,
              autoWidth: params.width ? false : true,
              autoHeight: params.height ? false : true,
              autoHide: params.autoHide,
              topRatio: params.topRatio || topRatio,
              leftRatio: params.leftRatio || leftRatio,
              title: title,
              helpers: {
                title: (title && params.windowStyle !== 'seamless') ? {
                  type: 'inside',
                  position: 'top'
                } : null,
                overlay: (params.overlay != "false") ? {} : null
              },
              content: notificationBody,
              fixed: false, // HADDITION - scroll with the page 16.10.2015
              wrapCSS: (params.cssClass || "") + " " + "fancybox-" + (params.windowStyle || "seamless"),
              beforeShow: function () {
                cssCode && _SgmntfY_._getJq()('<style />').html(params.cssCode).prependTo(this.outer);
                try {
                  javascriptCode && eval(javascriptCode);
                  beforeShow.call(this); // change context
                }
                catch (err) {
                  _SgmntfY_._getJq().sgmFancybox.close(true);
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Error in notification message additional javascript code: ' + err);
                }
              },
              beforeClose: function () {
                if (_SgmntfY_._getJq().sgmFancybox.sendReject != false) {
                  _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Notification Window close for actionId: ' + params["actionId"]);
                  _SgmntfY_._variables.segmentifyObj("event:interaction", {
                    type: "close",
                    interactionId: params["actionId"],
                    instanceId: params["instanceId"]
                  });
                }
              },
              afterClose: function () {
                _SgmntfY_._getJq()(".fancybox-segmentify").remove();
              }
            };

            if (params.isModal == 'true') {
              fancyboxParams.closeBtn = false;
              fancyboxParams.closeClick = false;
              fancyboxParams.keys = null;
              if (fancyboxParams.helpers.overlay) {
                fancyboxParams.helpers.overlay.closeClick = false;
              }
            }

            _SgmntfY_._getJq().sgmFancybox(fancyboxParams);
            _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Notification Window opened for actionId: ' + params["actionId"]);
          }
        };
        _SgmntfY_._variables.segmentifyObj("event:interaction", {
          type: "impression",
          interactionId: params["interactionId"],
          instanceId: params["instanceId"]
        });
        openFancyBoxWindow();
        var retryLimit = 0;
        var interval = setInterval(function () {
          _SgmntfY_._getJq().sgmFancybox.update();
          if (++retryLimit === 20) {
            clearInterval(interval);
          }
        }, 100);
      },
      notificationBanner: function (params) {
        if (!_SgmntfY_._variables.initializeFancybox) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Fancybox not initialized, not opening popup!');
          return;
        }
        var openFancyBoxWindow = function () {
          // wait unit fancybox library is loaded
          if (typeof _SgmntfY_._getJq().sgmFancybox != 'function') {
            setTimeout(openFancyBoxWindow, _SgmntfY_._variables.constants.frequency);
          } else {
            // initialize buttons by parsing json string
            var buttons = [];
            try {
              if (params["buttons"]) buttons = JSON.parse(params["buttons"])
            } catch (exception) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Cannot parse buttons json, str: ' + params["buttons"]);
              buttons = [];
            }
            // open fancybox
            var topRatio = 0.5;
            var leftRatio = 0.5;
            switch (params["windowPosition"]) {
              case 'top':
                topRatio = 0;
                break;
              case 'bottom':
                topRatio = 1;
                break;
              case 'left':
                leftRatio = 0;
                break;
              case 'right':
                leftRatio = 1;
                break;
              case 'top-left':
                leftRatio = 0;
                topRatio = 0;
                break;
              case 'top-right':
                leftRatio = 1;
                topRatio = 0;
                break;
              case 'bottom-left':
                leftRatio = 0;
                topRatio = 1;
                break;
              case 'bottom-right':
                leftRatio = 1;
                topRatio = 1;
                break;
            }
            var javascriptCode = params.javascriptCode ? params.javascriptCode : null;
            _SgmntfY_._getJq().sgmFancybox.close(true);
            var fancyboxParams = {
              type: "image",
              topRatio: topRatio,
              leftRatio: leftRatio,
              href: params.imageUrl,
              buttonPosition: params.buttonPosition,
              title: params.title,
              clickUrl: params.redirectUrl,
              clickNewWindow: params.newWindow === 'true',
              buttons: buttons,
              autoSize: false,
              imageWidth: params.width,
              imageHeight: params.height,
              sendReject: true,
              helpers: {
                overlay: (params.overlay != "false") ? {} : null
              }
            };
            if (params.isModal == 'true') {
              fancyboxParams.closeBtn = false;
              fancyboxParams.closeClick = false;
              fancyboxParams.keys = null;
              if (fancyboxParams.helpers.overlay) {
                fancyboxParams.helpers.overlay.closeClick = false;
              }
            }
            _SgmntfY_._getJq().sgmFancybox.open([fancyboxParams], {
              // resize image if necessary
              beforeShow: function () {
                if (this.imageWidth) this.width = this.imageWidth;
                if (this.imageHeight) this.height = this.imageHeight;
                try {
                  javascriptCode && eval(javascriptCode);
                } catch (err) {
                  _SgmntfY_._getJq().sgmFancybox.close(true);
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Error in notification message additional javascript code: ' + err);
                }
              },
              // after image load initializations
              afterLoad: function () {
                // redirect helper and button overlays
                var fancyBoxObj = this;
                var button_overlay = _SgmntfY_._getJq()('<div>');
                button_overlay
                  .addClass("overlay-area-buttons")
                  .addClass(this.buttonPosition || 'right')
                  .appendTo(this.inner);
                var redirectFn = function (redirectUrl, newWindow) {
                  _SgmntfY_._getJq().sgmFancybox.showLoading();
                  var actualRedirectFn = function (redirectUrl, target) {
                    fancyBoxObj.sendReject = false;
                    window.open(redirectUrl, target);
                    _SgmntfY_._getJq().sgmFancybox.close();
                    _SgmntfY_._getJq().sgmFancybox.hideLoading();
                  };
                  if (newWindow === 'true' || newWindow === true) actualRedirectFn(redirectUrl, "_blank");
                  else setTimeout(function () {
                    actualRedirectFn(redirectUrl, "_self");
                  }, _SgmntfY_._variables.constants.redirectDelay);
                };
                // add title
                if (this.title) {
                  _SgmntfY_._getJq()('<div class="overlay-area-title" ><span>' + this.title + '</span></div>').appendTo(this.inner);
                }
                // add buttons
                var buttons = this.buttons || [];
                for (var i = 0; i < buttons.length; i++) {
                  _SgmntfY_._getJq()('<button />')
                    .data('newWindow', buttons[i].newWindow)
                    .data('target', buttons[i].buttonUrl)
                    .addClass("fancybox-button")
                    .addClass(buttons[i].buttonColor)
                    .text(buttons[i].buttonTitle)
                    .click(function () {
                      _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Image Banner button click for actionId: ' + params["actionId"]);
                      _SgmntfY_._variables.segmentifyObj("event:interaction", {
                        type: "click",
                        interactionId: _SgmntfY_._getJq()(this).text(),
                        instanceId: params["instanceId"]
                      });
                      redirectFn(_SgmntfY_._getJq()(this).data('target'), _SgmntfY_._getJq()(this).data('newWindow'));
                      return false;
                    })
                    .appendTo(button_overlay);
                }
                // add redirect target for image
                if (this.clickUrl) {
                  this.inner.addClass("clickable").click(function () {
                    _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Image Banner image click for actionId: ' + params["actionId"]);
                    _SgmntfY_._variables.segmentifyObj("event:interaction", {
                      type: "click",
                      interactionId: "image",
                      instanceId: params["instanceId"]
                    });
                    redirectFn(fancyBoxObj.clickUrl, fancyBoxObj.clickNewWindow);
                    return false;
                  });
                }
              },
              // before close, send reject event if not closed programatically
              beforeClose: function () {
                if (this.sendReject) {
                  _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Image Banner close for actionId: ' + params["actionId"]);
                  _SgmntfY_._variables.segmentifyObj("event:interaction", {
                    type: "close",
                    interactionId: params["actionId"],
                    instanceId: params["instanceId"]
                  });
                }
              },
              afterClose: function () {
                _SgmntfY_._getJq()(".fancybox-segmentify").remove();
              }
            });
            _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Notification Banner opened for actionId: ' + params["actionId"]);
          }
        };
        _SgmntfY_._variables.segmentifyObj("event:interaction", {
          type: "impression",
          interactionId: params["interactionId"],
          instanceId: params["instanceId"]
        });
        openFancyBoxWindow();
      },
      notificationMessage: function (params) {
        // initialize buttons by parsing json string
        var buttons = [];
        try {
          if (params["buttons"]) buttons = JSON.parse(params["buttons"])
        } catch (exception) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Cannot parse buttons json, str: ' + params["buttons"]);
          buttons = [];
        }
        params.html = params.notificationText;
        params.buttons = buttons;
        _SgmntfY_._actions._notificationWindow(params);
      },
      visitorForm: function (params) {
        switch (params.actionType) {
          case 'INPAGE_WIDGET':
          {
            // get object
            try {
              var targetElement = _SgmntfY_._getJq()(params.selector);
              if (targetElement.length > 0) {
                targetElement.addClass("sgm-recommendation sgm-clearcss").html(params.formHtml);
                var jq = _SgmntfY_._getJq();
                var $form = targetElement.find("form").eq(0);
                $form.submit(function (event) {
                  event.preventDefault();
                  jq.sgmFancybox.showLoading();
                  _SgmntfY_.LOG_MESSAGE('DEBUG', 'In-page Form button click for actionId: ' + params["actionId"]);
                  _SgmntfY_._variables.segmentifyObj("event:interaction", {
                    type: "submit",
                    interactionId: params["formName"],
                    instanceId: params["instanceId"]
                  });
                  _SgmntfY_._variables.segmentifyObj("user:form", {
                    formName: params["formName"],
                    fields: $form.sgmSerializeForm()
                  });
                  setTimeout(function () {
                    targetElement.html(params["successHtml"]);
                    jq.sgmFancybox.hideLoading();
                  }, 1000);
                });
              } else {
                _SgmntfY_.LOG_MESSAGE('ERROR', 'Error in filling target element[' + params.selector + '], element does not exist');
              }
            } catch (err) {
              _SgmntfY_.LOG_MESSAGE('ERROR', 'Error in filling target element[' + params.selector + '] with visitor form: ' + err);
            }
            break;
          }
          case 'POPUP_WINDOW':
          default:
          {
            // create submit button
            params.beforeShow = function () {
              var fancyBoxThis = this;
              var jq = _SgmntfY_._getJq();
              var $inner = _SgmntfY_._getJq()(this.inner);
              var $form = $inner.find("form").eq(0);
              $form.submit(function (event) {
                event.preventDefault();
                jq.sgmFancybox.showLoading();
                _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Form button click for actionId: ' + params["actionId"]);
                _SgmntfY_._variables.segmentifyObj("event:interaction", {
                  type: "submit",
                  interactionId: params["formName"],
                  instanceId: params["instanceId"]
                });
                _SgmntfY_._variables.segmentifyObj("user:form", {
                  formName: params["formName"],
                  fields: $form.sgmSerializeForm()
                });
                fancyBoxThis.sendReject = false;
                setTimeout(function () {
                  $inner.html(params["successHtml"]);
                  $inner.find("button.close-button").click(function () {
                    jq.sgmFancybox.close();
                  });
                  jq.sgmFancybox.hideLoading();
                }, _SgmntfY_._variables.redirectDelay);
              });
            };
            params.html = params.formHtml;
            _SgmntfY_._actions._notificationWindow(params);
            break;
          }
        }
      },
      recommendProducts: function (params, request) {
        var previousMetadata = {
          'productId': request.originalParams.productId,
          'productUrl': request.originalParams.productUrl,
          'instanceId': params.instanceId
        };

        function checkDynamicItemCount(items, item) {
          for (var i = 0; i < items.length; ++i) {
            if ((items[i].recommendationSource + '|' + items[i].timeFrame) == item) {
              return items[i].itemCount;
            }
          }
          return null;
        }

        //check product function.
        //return true is product exists
        function checkProductInList(list, id) {
          for (var innerProd = 0; innerProd < list.length; innerProd++) {
            if (list[innerProd].productId == id) return true;
          }
          return false;
        }

        function isElemVisible($elem) {
          try {
            if (_SgmntfY_._exists($elem)) {
              var $window = _SgmntfY_._getJq()(window);

              var docViewTop = $window.scrollTop();
              var docViewBottom = docViewTop + $window.height();

              if ($elem instanceof HTMLElement) {
                $elem = _SgmntfY_._getJq()($elem);
              } else if ($elem instanceof HTMLCollection) {
                $elem = _SgmntfY_._getJq()($elem[0]);
              }
              var elemTop = $elem.offset().top;
              var elemBottom = elemTop + 100; // seeing 100 pixels of element is enough for us

              return ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
            } else {
              return false;
            }
          } catch (err) {
            return false;
          }
        }
        function decodeHtml(html) {
          var txt = document.createElement("textarea");
          txt.innerHTML = html;
          return txt.value;
        }

        // calculate product list from response
        var productList = [];
        var recommendedProducts = params.recommendedProducts || {};
        var dynamicItems = JSON.parse(params.dynamicItems) || [];

        //put static items first
        for (var i = 0; i < recommendedProducts['RECOMMENDATION_SOURCE_STATIC_ITEMS'].length; ++i) {
          var elm = recommendedProducts['RECOMMENDATION_SOURCE_STATIC_ITEMS'][i];
          if (!checkProductInList(productList, elm.productId)) {
            productList.push(elm);
          }
        }
        if (params.ordering == 'SHUFFLE') {
          function allNull(arr) {
            for (var i in arr) {
              if (arr.hasOwnProperty(i)) {
                if (arr[i] !== undefined || arr[i] !== null) {
                  return false;
                }
              }
            }
            return true;
          }
          function arrayRandom() {
            return parseInt(Math.random() * 100);
          }
          var itemCounts = [];
          var dynamicLengths = [];
          for (var idx in dynamicItems) {
            if (dynamicItems.hasOwnProperty(idx)) {
              itemCounts.push(parseInt(dynamicItems[idx]['itemCount'] || 0));
              if (typeof dynamicItems[idx]['timeFrame'] === 'undefined') {
                dynamicItems[idx]['timeFrame'] = 'null';
              }
              var source = dynamicItems[idx]['recommendationSource'] + '|' + dynamicItems[idx]['timeFrame'];
              if (recommendedProducts.hasOwnProperty(source)) dynamicLengths.push(recommendedProducts[source].length);
              else dynamicLengths.push(0);
            }
          }
          var firstLevel = [];
          var firstLevelTotal = itemCounts.reduce(function (a, b) { return a + b; }, 0);
          for (idx in itemCounts) {
            if (itemCounts.hasOwnProperty(idx)) {
              if (idx == itemCounts.length - 1) {
                firstLevel.push(100);
              } else {
                var pct = parseInt(itemCounts[idx] / firstLevelTotal * 100);
                if (idx == 0) firstLevel.push(pct);
                else firstLevel.push(firstLevel[firstLevel.length - 1] + pct);
              }
            }
          }
          var secondLevel = [];
          for (var dl in dynamicLengths) {
            if (dynamicLengths.hasOwnProperty(dl)) {
              var len = dynamicLengths[dl];
              var sumOfSquares = len * (len + 1) * (2 * len + 1) / 6;
              var tmpArr = [];
              for (var l = len; l > 0; --l) {
                if (l == 1) {
                  tmpArr.push(100);
                } else {
                  pct = parseInt(Math.pow(l, 2) / sumOfSquares * 100);
                  if (l == len) tmpArr.push(pct);
                  else tmpArr.push(tmpArr[tmpArr.length - 1] + pct);
                }
              }
              secondLevel.push(tmpArr);
            }
          }
          var dynamicProducts = [];
          var iteration = 0;
          while (true) {
            // break under these conditions
            if (++iteration > 10000) {
              break;
            }
            if (dynamicProducts.length >= firstLevelTotal) {
              break;
            }
            var allNullCheck = true;
            for (idx in dynamicItems) {
              if (dynamicItems.hasOwnProperty(idx)) {
                source = dynamicItems[idx]['recommendationSource'] + '|' + dynamicItems[idx]['timeFrame'];
                var tmpCheck = true;
                if (recommendedProducts.hasOwnProperty(source)) {
                  tmpCheck = allNull(recommendedProducts[source]);
                }
                if (!tmpCheck) {
                  allNullCheck = false;
                  break;
                }
              }
            }
            if (allNullCheck) {
              break;
            }
            // search for products
            var rand = arrayRandom();
            var firstLevelIndex = -1;
            for (var fl in firstLevel) {
              if (firstLevel.hasOwnProperty(fl)) {
                if (rand < firstLevel[fl]) {
                  firstLevelIndex = fl;
                  break;
                }
              }
            }
            if (firstLevelIndex == -1 || !dynamicItems.hasOwnProperty(firstLevelIndex)) {
              continue;
            }
            source = dynamicItems[firstLevelIndex]['recommendationSource'] + '|' + dynamicItems[firstLevelIndex]['timeFrame'];
            rand = arrayRandom();
            var secondLevelIndex = -1;
            for (var sl in secondLevel[firstLevelIndex]) {
              if (secondLevel[firstLevelIndex].hasOwnProperty(sl)) {
                if (rand < secondLevel[firstLevelIndex][sl]) {
                  secondLevelIndex = sl;
                  break;
                }
              }
            }
            if (secondLevelIndex == -1 || !recommendedProducts[source].hasOwnProperty(secondLevelIndex)) {
              continue;
            }
            var candidate = recommendedProducts[source].splice(secondLevelIndex, 1)[0];
            if (candidate == null) {
              continue;
            }
            recommendedProducts[source].splice(secondLevelIndex, 0, null);

            var eliminationFuncRetVal = false;
            if (params.eliminationFunction) {
              var func = _SgmntfY_._getObjectByString(window, params.eliminationFunction);
              if (typeof func === 'function') {
                try {
                  eliminationFuncRetVal = func.call(null, candidate);
                } catch (err) {
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing product recommendation elimination js function: ' + err);
                }
              }
            }
            // if eliminated, continue loop
            if (eliminationFuncRetVal) {
              continue;
            }

            candidate.name = decodeHtml(candidate.name);

            var sourceLastVisited = 'RECOMMENDATION_SOURCE_LAST_VISITED' === dynamicItems[firstLevelIndex]['recommendationSource'];
            switch (params.elimination) {
              case 'ELIMINATE_DUPLICATES':
                if (!checkProductInList(productList, candidate.productId)) {
                  if (sourceLastVisited || !_SgmntfY_._containsRecommendedProduct(candidate.productId) || _SgmntfY_._variables.offerRecommendedProducts) {
                    productList.push(candidate);
                    dynamicProducts.push(candidate);
                    if (!sourceLastVisited) {
                      _SgmntfY_._addRecommendedProduct(candidate.productId);
                    }
                  }
                }
                break;
              case 'ELIMINATE_PREVIOUS':
                if (!checkProductInList(productList, candidate.productId)) {
                  if (sourceLastVisited || (_SgmntfY_._getViewedProducts().indexOf(candidate.productId) == -1 && (!_SgmntfY_._containsRecommendedProduct(candidate.productId) || _SgmntfY_._variables.offerRecommendedProducts))) {
                    productList.push(candidate);
                    dynamicProducts.push(candidate);
                    if (!sourceLastVisited) {
                      _SgmntfY_._addRecommendedProduct(candidate.productId);
                    }
                  }
                }
                break;
              case 'NO_ELIMINATION':
              default:
                productList.push(candidate);
                dynamicProducts.push(candidate);
                if (!sourceLastVisited) {
                  _SgmntfY_._addRecommendedProduct(candidate.productId);
                }
                break;
            }
          }
        } else {
          var missingCount = 0;
          /* add dynamic items */
          for (var ri = 0; ri < dynamicItems.length; ++ri) {
            if (typeof dynamicItems[ri].timeFrame === 'undefined') {
              dynamicItems[ri].timeFrame = 'null';
            }
            var curRecommendationSource = dynamicItems[ri].recommendationSource + '|' + dynamicItems[ri].timeFrame;
            var curCatItemCount = parseInt(checkDynamicItemCount(dynamicItems, curRecommendationSource));
            if (isNaN(curCatItemCount)) {
              curCatItemCount = 0;
            }

            if (recommendedProducts.hasOwnProperty(curRecommendationSource) && curCatItemCount) {
              missingCount += curCatItemCount;
              var index = 0;
              for (var i = 0; i < recommendedProducts[curRecommendationSource].length; ++i) {
                var elm = recommendedProducts[curRecommendationSource][i];

                elm.name = decodeHtml(elm.name);

                if ((index >= curCatItemCount) && (missingCount == 0)) {
                  break;
                }

                var eliminationFnRetVal = false;
                if (params.eliminationFunction) {
                  var fx = _SgmntfY_._getObjectByString(window, params.eliminationFunction);
                  if (typeof fx === 'function') {
                    try {
                      eliminationFnRetVal = fx.call(null, elm);
                    } catch (err) {
                      _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing product recommendation elimination js function: ' + err);
                    }
                  }
                }

                // if eliminated, continue loop
                if (eliminationFnRetVal) {
                  continue;
                }

                var sourceLastVisited = 'RECOMMENDATION_SOURCE_LAST_VISITED' === dynamicItems[ri].recommendationSource;
                switch (params.elimination) {
                  case 'ELIMINATE_DUPLICATES':
                    if (!checkProductInList(productList, elm.productId)) {
                      if (sourceLastVisited || !_SgmntfY_._containsRecommendedProduct(elm.productId) || _SgmntfY_._variables.offerRecommendedProducts) {
                        productList.push(elm);
                        if (!sourceLastVisited) {
                          _SgmntfY_._addRecommendedProduct(elm.productId);
                        }
                        ++index;
                        --missingCount;
                      }
                    }
                    break;
                  case 'ELIMINATE_PREVIOUS':
                    if (!checkProductInList(productList, elm.productId)) {
                      if (sourceLastVisited || (_SgmntfY_._getViewedProducts().indexOf(elm.productId) == -1 && (!_SgmntfY_._containsRecommendedProduct(elm.productId) || _SgmntfY_._variables.offerRecommendedProducts))) {
                        productList.push(elm);
                        if (!sourceLastVisited) {
                          _SgmntfY_._addRecommendedProduct(elm.productId);
                        }
                        ++index;
                        --missingCount;
                      }
                    }
                    break;
                  case 'NO_ELIMINATION':
                  default:
                    productList.push(elm);
                    if (!sourceLastVisited) {
                      _SgmntfY_._addRecommendedProduct(elm.productId);
                    }
                    ++index;
                    --missingCount;
                    break;
                }
              }
            }
          }
        }

        if (productList.length == 0) {
          if (request.recommendationCallback) {
            request.recommendationCallback(params.notificationTitle, [], previousMetadata, null);
          }
          return;
        }/* else if (params.ordering == 'SHUFFLE') {
          productList = _SgmntfY_._shuffle(productList);
        }*/

        _SgmntfY_._variables.segmentifyObj("event:interaction", {
          type: "impression",
          interactionId: params["actionId"],
          instanceId: params["instanceId"]
        });

        var wvInteractionId = params["interactionId"];
        var wvInstanceId = params["instanceId"];
        var wvCB = function ($elem) {
          var eventSent = false;
          if (!eventSent && isElemVisible($elem)) {
            _SgmntfY_._variables.segmentifyObj("event:interaction", {
              type: "widget-view",
              interactionId: wvInteractionId,
              instanceId: wvInstanceId
            });
            eventSent = true;
          } else {
            if (!eventSent) {
              _SgmntfY_._getJq()(window).on('scroll', function () {
                if (!eventSent && isElemVisible($elem)) {
                  _SgmntfY_._variables.segmentifyObj("event:interaction", {
                    type: "widget-view",
                    interactionId: wvInteractionId,
                    instanceId: wvInstanceId
                  });
                  eventSent = true;
                }
              });
            }
          }
        };
        if (request.recommendationCallback) {
          request.recommendationCallback(params.notificationTitle, productList, previousMetadata, wvCB);
          return;
        }
        switch (params.actionType) {
          case 'INPAGE_WIDGET':
          {
            // get target selector into a variable
            var target = params.selector;

            // if target selector is not defined or does not exist in the page, skip
            if (!target || !_SgmntfY_._getJq()(target).length) {
              // insert log
              _SgmntfY_.LOG_MESSAGE('WARN', 'Error in finding target element[' + target + '], element does not exist');

              return;
            }

            // declare recommendation title variable
            var recoTitle = params.notificationTitle;

            var renderIdx = 0;
            var reConf = {
              "title": recoTitle,
              "products": productList,
              "index": function() {
                return ++renderIdx;
              },
              "discount": function() {
                try {
                  var price = this.price;
                  var oldPrice = this.oldPrice;

                  if (!price || !oldPrice || price == oldPrice) return null;

                  var discountRatio = 100 - ((price * 100) / oldPrice);

                  return discountRatio > 0 && Math.round(discountRatio);
                } catch (err) {
                  // if any error occurs return null
                  return null;
                }
              },
              "commaFormatPrice": function () {
                return this.toFixed(2).toString().replace(/\./g, ",");
              },
              "dotFormatPrice": function () {
                return this.toFixed(2).toString();
              }
            };

            try {
              if (params.preJsCode) {
                eval(params.preJsCode);
                var retVal = preRenderConf(reConf);
                if (typeof retVal !== 'undefined' && !retVal) {
                  _SgmntfY_.LOG_MESSAGE('WARN', 'preRenderConf returned false exiting!');
                  return;
                }
              }
            } catch (err) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing product recommendation pre js code: ' + err);
            }

            // check if the account is freemium/brand is enabled
            if (reConf['brandingEnabled']) {
              // if branding is enabled add "recommended by Segmentify" into to recommendation title
              reConf.title += "<a target=\"_blank\" class=\"seg-rec-logo\" href=\"\/\/www.segmentify.com\">Recommended by <img src=\"\/\/cdn.segmentify.com/images/sgm-logo.svg\" /></a>";
            }

            // render products with the given template
            var renderedHtml = _SgmntfY_._getMustache().render(params.recommendationTemplate, reConf);

            try {
              // get target element as jQuery object
              var targetElement = _SgmntfY_._getJq()(target).first();

              // put rendered recommendation HTML into the target
              if (params.insertType == 'SELF') {
                targetElement.html(renderedHtml);
                if (wvCB) {
                  wvCB(targetElement);
                }
              } else {
                var $div = _SgmntfY_._getJq()('<div/>');
                if (params.insertType == 'AFTER' || params.insertType == 'BEFORE') {
                  params.insertType == 'AFTER' ? $div.html(renderedHtml).insertAfter(targetElement) : $div.html(renderedHtml).insertBefore(targetElement);
                } else if (params.insertType == 'APPEND' || params.insertType == 'PREPEND') {
                  params.insertType == 'APPEND' ? $div.html(renderedHtml).appendTo(targetElement) : $div.html(renderedHtml).prependTo(targetElement);
                }
                if (wvCB) {
                  wvCB($div);
                }
              }
            } catch (err) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Error in filling target element[' + target + '] with product recommendations: ' + err);
            }

            try {
              params.postJsCode && eval(params.postJsCode);
            } catch (err) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing product recommendation post js code: ' + err);
            }

            break;
          }
          case 'JAVASCRIPT_FUNCTION':
          {
            // call javascript function
            var fx = _SgmntfY_._getObjectByString(window, params.jsFunction);
            var title = params.notificationTitle;
            if (typeof fx === 'function') {
              try {
                fx.call(null, title, productList, previousMetadata, wvCB);
              } catch (err) {
                _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing product recommendation js function: ' + err);
              }
            } else {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Product Recommendation javascript function(' + params.jsFunction + ') does not exist');
            }

            break;
          }
          case 'WEB_NOTIFICATION':
          case 'SEND_MAIL':
            // server side action
            break;
          case 'POPUP_WINDOW':
          default:
          {
            // open modal window
            params.html = _SgmntfY_._getJq()("<div class='sgm-product-list'>");
            for (var i = 0; i < productList.length; i++) {
              var anchorTag = _SgmntfY_._getJq()("<a>");
              anchorTag.addClass('sgm-product')
                .attr('title', productList[i].name)
                .attr('href', productList[i].url)
                .data('productId', productList[i].productId)
                .html("<div class='sgm-product-image-container'>" +
                "<img class='sgm-product-image' src='" + productList[i].image + "' alt='" + productList[i].name + "' />" +
                "</div>" +
                "<div class='sgm-product-details'>" +
                "<p class='sgm-product-name'>" + productList[i].name + "</p>" +
                (params.messageStyle == 'TITLE_WITH_PRICE' ?
                  "<p class='sgm-product-price'>" +
                    (productList[i].oldPrice ? "<span class='old-price'>â‚º" + productList[i].oldPrice + "</span>" : "") +
                    (productList[i].price ? "â‚º" + productList[i].price : "") +
                  "</p>" :
                  "" ) +
                "</div>")
                .click(function () {
                  _SgmntfY_._getJq().sgmFancybox.showLoading();
                }).appendTo(params.html);
            }
            params.position = params.position || "bottom-right";
            if (typeof params.overlay == 'undefined') params.overlay = "false";
            params.cssClass = 'sgm-product-popup ' + (params.cssClass || '');
            _SgmntfY_._actions._notificationWindow(params);

            break;
          }
        }
      },
      webNotification: function (params) {
        // server side action
      },
      redirectUrl: function (params) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Redirecting action to url: ' + params.redirectUrl);
        window.location = params.redirectUrl;
      },
      jsFunctionCall: function (params) {
        params['actionType'] = 'JAVASCRIPT_FUNCTION';
        _SgmntfY_._actions.jsAction(params);
      },
      jsAction: function (params) {
        // get action type;
        var actionType = params['actionType'];
        switch(actionType) {
          case 'JAVASCRIPT_EVENT': {
            var event = params['event'], parameters = [];
            // initialize parameters by parsing json string
            try {
              if (params["parameters"]) parameters = JSON.parse(params["parameters"])
            } catch (exception) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Js Action (Event Trigger) - Cannot parse parameters json, str: ' + params["parameters"]);
              parameters = [];
            }
            parameters.push(function () {
              _SgmntfY_._variables.segmentifyObj("event:interaction", {
                type: "js_success",
                interactionId: params["actionId"],
                instanceId: params["instanceId"]
              });
            });
            parameters.push(function () {
              _SgmntfY_._variables.segmentifyObj("event:interaction", {
                type: "js_reject",
                interactionId: params["actionId"],
                instanceId: params["instanceId"]
              });
            });
            // trigger event on document with parameters
            _SgmntfY_._getJq()(document).trigger(event, parameters);
            _SgmntfY_.LOG_MESSAGE('DEBUG', 'Js Action (Event Trigger) - Triggered Event: ' + event);
            break;
          }
          case 'JAVASCRIPT_CODE': {
            try {
              eval(params['javascriptCode']);
              _SgmntfY_._variables.segmentifyObj("event:interaction", {
                type: "js_success",
                interactionId: params["actionId"],
                instanceId: params["instanceId"]
              });
              _SgmntfY_.LOG_MESSAGE('DEBUG', 'Js Action (Execute Code) successfully executed');
            } catch (err) {
              _SgmntfY_._variables.segmentifyObj("event:interaction", {
                type: "js_reject",
                interactionId: params["actionId"],
                instanceId: params["instanceId"]
              });
              _SgmntfY_.LOG_MESSAGE('WARN', 'Error in JS Action (Execute Code): ' + err);
            }
            break;
          }
          case 'JAVASCRIPT_FUNCTION':
          default: {
            var fx = window[params['function']], parameters = [];
            // call function
            if (typeof fx === 'function') {
              // initialize parameters by parsing json string
              try {
                if (params["parameters"]) parameters = JSON.parse(params["parameters"])
              } catch (exception) {
                _SgmntfY_.LOG_MESSAGE('WARN', 'Js Action (Function Call) - Cannot parse parameters json, str: ' + params["parameters"]);
                parameters = [];
              }
              parameters.push(function () {
                _SgmntfY_._variables.segmentifyObj("event:interaction", {
                  type: "js_success",
                  interactionId: params["actionId"],
                  instanceId: params["instanceId"]
                });
              });
              parameters.push(function () {
                _SgmntfY_._variables.segmentifyObj("event:interaction", {
                  type: "js_reject",
                  interactionId: params["actionId"],
                  instanceId: params["instanceId"]
                });
              });
              // actual call
              fx.apply(null, parameters);
              _SgmntfY_.LOG_MESSAGE('DEBUG', 'Js Action (Function Call) successfully run for function: ' + params['function']);
            }
            else _SgmntfY_.LOG_MESSAGE('WARN', 'Js Action (Function Call) failed, non existing function: ' + params['function']);
            break;
          }
        }
      },
      jsCountdownTimer: function (params) {
        var timeout = params['timeout'];
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Starting countdown timer with ' + (timeout || 0) * 1000 + ' second(s)');
        setTimeout(function () {
          _SgmntfY_.LOG_MESSAGE('DEBUG', 'Countdown timer finished after ' + (timeout || 0) * 1000 + ' second(s)');
          _SgmntfY_._variables.segmentifyObj("event:interaction", {
            type: "timeout",
            interactionId: params["actionId"],
            instanceId: params["instanceId"]
          });
        }, (timeout || 0) * 1000);
      },
      sendProductDetails: function (params, request) {
        // check skip product detail
        if (_SgmntfY_._variables.skipProductDetail.device.indexOf(_SgmntfY_._variables.ua.type) >= 0) {
          _SgmntfY_.LOG_MESSAGE('DEBUG', 'Current device[' + _SgmntfY_._variables.ua.type + '] is not allowed for product detail');
          return;
        }

        // try to read missing product details from meta tags
        var data = request.originalParams;
        // add product id and last update time if existing
        data.productId = params.productId;
        // send back
        var requestDatas = [];
        var requestData = _SgmntfY_._functions.productDetail(data);
        if (requestData) {
          requestDatas.push(requestData);
        }
        _SgmntfY_._sendRequestToServer(requestDatas);
      },
      sendBannerDetails: function (params, request) {
        var data = request.originalParams;
        data.group = params.group;
        // send back
        var requestDatas = [];
        var requestData = _SgmntfY_._functions.bannerGroupDetail(data);
        if (requestData) {
          requestDatas.push(requestData);
        }
        _SgmntfY_._sendRequestToServer(requestDatas);
      }
    },
    _campaigns: {
      NEWSLETTER: function (campaign, request) {
        var config = {
          title: campaign['title'],
          description: campaign['description'],
          placeholder: campaign['placeholder'],
          termsUrl: campaign['termsUrl'],
          termsText: campaign['termsText'],
          buttonSubmitText: campaign['buttonSubmitText'],
          buttonThanksText: campaign['buttonThanksText'],
          buttonBgColor: campaign['buttonBgColor'],
          buttonTextColor: campaign['buttonTextColor'],
          vertical: campaign['verticalPosition'],
          horizontal: campaign['horizontalPosition']
        };
        try {
          if (campaign['preJs']) {
            eval(campaign['preJs']);
            var retVal = preRenderConf(config);
            if (typeof retVal !== 'undefined' && !retVal) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'preRenderConf returned false exiting!');
              return;
            }
          }
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign pre js code: ' + err);
        }
        // render campaign html
        var renderedHtml = _SgmntfY_._getMustache().render(campaign['html'], config);
        _SgmntfY_._getJq()('body').prepend(renderedHtml);
        campaign['css'] && _SgmntfY_._getJq()('<style />').html(campaign['css']).prependTo(_SgmntfY_._getJq()('body'));
        try {
          campaign['postJs'] && eval(campaign['postJs']);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign post js code: ' + err);
        }
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Newsletter popup appended to html body for campaign(' + campaign['instanceId'] + ')');
        // send impression
        _SgmntfY_._variables.segmentifyObj('event:interaction', {
          type: 'impression',
          instanceId: campaign['instanceId'],
          interactionId: campaign['instanceId']
        });
        // bind close handler
        _SgmntfY_._getJq()('.seg-popup-close').bind('click', function () {
          var $this = _SgmntfY_._getJq()(this);
          $this.parent('.seg-popup').removeClass('segFadeInUp').addClass('segFadeOutDown');
          window.setTimeout(function () {
            $this.parent('.seg-popup').remove();
          }, 1000);
        });
        // bind submit handler
        _SgmntfY_._getJq()('.seg-form-submit').bind('click', function(e) {
          _SgmntfY_._getJq()('.seg-form-input').removeClass('seg-form-invalid');
          _SgmntfY_._getJq()('.seg-email-collection .seg-checkbox').removeClass('seg-form-invalid');
          e.preventDefault();
          var $formInput = _SgmntfY_._getJq()('.seg-form-input');
          var $formCheckbox = _SgmntfY_._getJq()('.seg-email-collection .seg-form-footer input[type="checkbox"]');
          if (isEmail($formInput.val()) && $formCheckbox.is(':checked') == true) {
            _SgmntfY_._getJq()(this).addClass('seg-sending');
            setTimeout(function() {
              _SgmntfY_._getJq()('.seg-email-collection').addClass('seg-popup-thanks').removeClass('segFadeInUp');
            }, 1300);
            setTimeout(function() {
              _SgmntfY_._getJq()('.seg-email-collection').addClass('segFadeOutDown');
            }, 3000);
            setTimeout(function() {
              _SgmntfY_._getJq()('.seg-email-collection').remove();
            }, 6000);
            // send form event
            var $newsletterForm = _SgmntfY_._getJq()('#seg-email-collection');
            if ($newsletterForm.length > 0) {
              _SgmntfY_._variables.segmentifyObj('event:interaction', {
                type: 'submit',
                interactionId: campaign['name'],
                instanceId: campaign['instanceId']
              });
              _SgmntfY_._variables.segmentifyObj('user:form', {
                formName: campaign['name'],
                fields: $newsletterForm.sgmSerializeForm()
              });
            }
          }
          if (!isEmail($formInput.val())) {
            $formInput.addClass('seg-form-invalid');
          }
          if ($formCheckbox.is(':checked') == false) {
            _SgmntfY_._getJq()('.seg-terms .seg-checkbox').addClass('seg-form-invalid');
          }
        });

        var isEmail = function (email) {
          var regex = /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/;
          return regex.test(email);
        }
      },
      FORM: function (campaign, request) {
      },
      POPUP_BANNER: function (campaign, request) {
        if (!_SgmntfY_._variables.initializeFancybox) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Fancybox not initialized, not opening popup!');
          return;
        }

        var openFancyboxWindow = function () {
          // wait until fancybox library is loaded
          if (typeof _SgmntfY_._getJq().sgmFancybox !== 'function') {
            window.setTimeout(openFancyboxWindow, _SgmntfY_._variables.constants.frequency);
          } else {
            // close already openned popups
            _SgmntfY_._getJq().sgmFancybox.close(true);
            var config = {
              title: campaign['title'],
              image: campaign['image'],
              url: campaign['url']
            };
            try {
              if (campaign['preJs']) {
                eval(campaign['preJs']);
                var retVal = preRenderConf(config);
                if (typeof retVal !== 'undefined' && !retVal) {
                  _SgmntfY_.LOG_MESSAGE('WARN', 'preRenderConf returned false exiting!');
                  return;
                }
              }
            } catch (err) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign pre js code: ' + err);
            }
            // render campaign html
            var renderedHtml = _SgmntfY_._getMustache().render(campaign['html'], config);
            var bannerBody = _SgmntfY_._getJq()('<div class="fancybox-body" />');
            bannerBody.html(renderedHtml);
            if (campaign['title']) {
              _SgmntfY_._getJq()('<div class="overlay-area-title" ><span>' + campaign['title'] + '</span></div>').appendTo(bannerBody);
            }
            // determine popup position
            var topRatio = 0.5; // default - middle
            var leftRatio = 0.5; // default - center
            if (campaign['verticalPosition'] === 'top') topRatio = 0;
            else if (campaign['verticalPosition'] === 'bottom') topRatio = 1;
            if (campaign['horizontalPosition'] === 'left') leftRatio = 0;
            else if (campaign['horizontalPosition'] === 'right') leftRatio = 1;
            var fancyboxParams = {
              minHeight: 10,
              width: 'auto',
              height: 'auto',
              autoSize: false,
              autoWidth: true,
              autoHeight: true,
              topRatio: topRatio,
              leftRatio: leftRatio,
              helpers: {
                title: null,
                overlay: (campaign['overlay'] === 'true' ? {} : null)
              },
              content: bannerBody,
              fixed: false,
              wrapCSS: 'fancybox-seamless',
              beforeShow: function () {
                campaign['css'] && _SgmntfY_._getJq()('<style />').html(campaign['css']).prependTo(this.outer);
                var fancyBoxObj = this;
                _SgmntfY_._getJq()('.sgf-link').bind('click', function () {
                  fancyBoxObj.sendReject = 'false';
                  _SgmntfY_._variables.segmentifyObj('event:interaction', {
                    type: 'click',
                    instanceId: campaign['instanceId'],
                    interactionId: campaign['instanceId']
                  });
                  _SgmntfY_._getJq().sgmFancybox.close();
                });
              },
              afterShow: function () {
                try {
                  campaign['postJs'] && eval(campaign['postJs']);
                  // send impression
                  _SgmntfY_._variables.segmentifyObj('event:interaction', {
                    type: 'impression',
                    instanceId: campaign['instanceId'],
                    interactionId: campaign['instanceId']
                  });
                } catch (err) {
                  _SgmntfY_._getJq().sgmFancybox.close(true);
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Error in popup banner postJs code: ' + err);
                }
              },
              beforeClose: function () {
                if (this.sendReject !== 'false') {
                  _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Notification Window closed for campaign(' + campaign['instanceId'] + ')');
                  _SgmntfY_._variables.segmentifyObj("event:interaction", {
                    type: "close",
                    instanceId: campaign['instanceId'],
                    interactionId: campaign['instanceId']
                  });
                }
              },
              afterClose: function () {
                _SgmntfY_._getJq()(".fancybox-segmentify").remove();
              }
            };
            _SgmntfY_._getJq().sgmFancybox(fancyboxParams);
            _SgmntfY_.LOG_MESSAGE('DEBUG', 'Fancybox Notification Window opened for campaign(' + campaign['instanceId'] + ')');
          }
        };
        openFancyboxWindow();
        var retryLimit = 0;
        var interval = setInterval(function () {
          _SgmntfY_._getJq().sgmFancybox.update();
          if (++retryLimit === 20) {
            clearInterval(interval);
          }
        }, 100);
      },
      POPUP_RECOMMENDATION: function (campaign, request) {
        var config = {
          title: campaign['title'],
          vertical: campaign['verticalPosition'],
          horizontal: campaign['horizontalPosition']
        };
        var productsList = campaign['productsList'] || [];
        var products = [];
        for (var i = 0; i < productsList.length; ++i) {
          for (var j = 0; j < productsList[i].length; ++j) {
            if (products.length == 3) {
              break;
            }
            products.push(productsList[i][j]);
          }
        }
        if (products.length != 3) {
          return;
        }
        config['products'] = products;
        try {
          if (campaign['preJs']) {
            eval(campaign['preJs']);
            var retVal = preRenderConf(config);
            if (typeof retVal !== 'undefined' && !retVal) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'preRenderConf returned false exiting!');
              return;
            }
          }
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign pre js code: ' + err);
        }
        // render campaign html
        var renderedHtml = _SgmntfY_._getMustache().render(campaign['html'], config);
        _SgmntfY_._getJq()('body').prepend(renderedHtml);
        campaign['css'] && _SgmntfY_._getJq()('<style />').html(campaign['css']).prependTo(_SgmntfY_._getJq()('body'));
        try {
          campaign['postJs'] && eval(campaign['postJs']);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign post js code: ' + err);
        }
        // overlay
        if (campaign['overlay'] === 'true') {
          _SgmntfY_._getJq()('.seg-popup-overlay').show();
        }
        // bind close handler
        _SgmntfY_._getJq()('.seg-popup-close').bind('click', function () {
          var $this = _SgmntfY_._getJq()(this);
          $this.parent('.seg-popup').removeClass('segFadeInUp').addClass('segFadeOutDown');
          window.setTimeout(function () {
            $this.parent('.seg-popup').remove();
            _SgmntfY_._getJq()('.seg-popup-overlay').remove();
          }, 1000);
        });
        // send impression
        _SgmntfY_._variables.segmentifyObj('event:interaction', {
          type: 'impression',
          instanceId: campaign['instanceId'],
          interactionId: campaign['instanceId']
        });
        // send widget-view
        _SgmntfY_._variables.segmentifyObj('event:interaction', {
          type: 'widget-view',
          instanceId: campaign['instanceId'],
          interactionId: campaign['instanceId']
        });
      },
      NOTIFICATION_BAR: function (campaign, request) {
        var config = {
          title: campaign['title'],
          image: campaign['image'],
          bgColor: campaign['bgColor'],
          textColor: campaign['textColor'],
          url: campaign['url'],
          divClass: 'sgf-notif-bar-' + campaign['verticalPosition']
        };
        try {
          if (campaign['preJs']) {
            eval(campaign['preJs']);
            var retVal = preRenderConf(config);
            if (typeof retVal !== 'undefined' && !retVal) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'preRenderConf returned false exiting!');
              return;
            }
          }
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign pre js code: ' + err);
        }
        // render campaign html
        var renderedHtml = _SgmntfY_._getMustache().render(campaign['html'], config);
        _SgmntfY_._getJq()('body').prepend(renderedHtml);
        campaign['css'] && _SgmntfY_._getJq()('<style />').html(campaign['css']).prependTo(_SgmntfY_._getJq()('body'));
        try {
          campaign['postJs'] && eval(campaign['postJs']);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign post js code: ' + err);
        }
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Notification Bar appended to html body for campaign(' + campaign['instanceId'] + ')');
        // send impression
        _SgmntfY_._variables.segmentifyObj('event:interaction', {
          type: 'impression',
          instanceId: campaign['instanceId'],
          interactionId: campaign['instanceId']
        });
        // bind click handler
        _SgmntfY_._getJq()('.sgf-link').bind('click', function () {
          _SgmntfY_._variables.segmentifyObj('event:interaction', {
            type: 'click',
            instanceId: campaign['instanceId'],
            interactionId: campaign['instanceId']
          });
        });
      },
      PUSH_PERMISSION: function (campaign, request) {
        var config = {
          title: campaign['title'],
          text: campaign['text'],
          icon: campaign['icon'],
          buttonLaterText: campaign['buttonLaterText'],
          buttonAllowText: campaign['buttonAllowText']
        };
        var pushFadeUp = function (timeout) {
          _SgmntfY_._getJq()('.seg-popup-push').addClass('seg-fade-up');
          window.setTimeout(function () {
            _SgmntfY_._getJq()('.seg-popup-push').remove();
          }, timeout);
        };
        try {
          if (campaign['preJs']) {
            eval(campaign['preJs']);
            var retVal = preRenderConf(config);
            if (typeof retVal !== 'undefined' && !retVal) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'preRenderConf returned false exiting!');
              return;
            }
          }
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign pre js code: ' + err);
        }
        // render campaign html
        var renderedHtml = _SgmntfY_._getMustache().render(campaign['html'], config);
        _SgmntfY_._getJq()('body').prepend(renderedHtml);
        campaign['css'] && _SgmntfY_._getJq()('<style />').html(campaign['css']).prependTo(_SgmntfY_._getJq()('body'));
        try {
          campaign['postJs'] && eval(campaign['postJs']);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Error in executing campaign post js code: ' + err);
        }
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Push Permission appended to html body for campaign(' + campaign['instanceId'] + ')');
        // send impression
        _SgmntfY_._variables.segmentifyObj('event:interaction', {
          type: 'impression',
          instanceId: campaign['instanceId'],
          interactionId: campaign['instanceId']
        });
        // bind click handlers
        _SgmntfY_._getJq()('.seg-popup-push-bttn-later').click(function () {
          _SgmntfY_._variables.segmentifyObj('event:interaction', {
            type: 'later',
            instanceId: campaign['instanceId'],
            interactionId: campaign['instanceId']
          });
          pushFadeUp(500);
        });
        _SgmntfY_._getJq()('.seg-popup-push-bttn-allow').click(function () {
          // send click
          _SgmntfY_._variables.segmentifyObj('event:interaction', {
            type: 'click',
            instanceId: campaign['instanceId'],
            interactionId: campaign['instanceId']
          });
          // close popup
          pushFadeUp(500);
          // open new window to get user's permission
          var apiKey = _SgmntfY_._variables.apiKey;
          var userId = _SgmntfY_._getUserId();
          var instanceId = campaign['instanceId'] || '';
          if (apiKey && userId) {
            var baseUrl = campaign['url'] || 'https://' + apiKey.split('-').join('') + '.app.segmentify.com/push/ecommerce.en.html';
            var url = baseUrl + '?apiKey=' + apiKey + '&userId=' + userId + '&instanceId=' + instanceId;
            window.open(url, 'Push Permission', 'width=600,height=350');
          }
        });
      }
    },
    // Functions
    _functions: {
      getFunction: function (name) {
        switch (name.toLowerCase()) {
          case 'apikey':
            return _SgmntfY_._functions.setApiKey;
          case 'loglevel':
            return _SgmntfY_._functions.setLogLevel;
          case 'variables':
            return _SgmntfY_._functions.setVariables;
          case 'userid':
            return _SgmntfY_._functions.setUserId;
          case 'readproduct':
            return _SgmntfY_._functions.viewProduct;
          case 'view:page':
            return _SgmntfY_._functions.pageView;
          case 'view:product':
            return _SgmntfY_._functions.productView;
          case 'detail:product':
            return _SgmntfY_._functions.productDetail;
          case 'basket:add':
            return _SgmntfY_._functions.addToBasket;
          case 'basket:remove':
            return _SgmntfY_._functions.removeFromBasket;
          case 'basket:clear':
            return _SgmntfY_._functions.clearBasket;
          case 'checkout:basket':
            return _SgmntfY_._functions.checkoutViewBasket;
          case 'checkout:customer':
            return _SgmntfY_._functions.checkoutCustomerInfo;
          case 'checkout:payment':
            return _SgmntfY_._functions.checkoutPaymentInfo;
          case 'checkout:purchase':
            return _SgmntfY_._functions.checkoutPurchase;
          case 'user:signin':
            return _SgmntfY_._functions.userSignIn;
          case 'user:signout':
            return _SgmntfY_._functions.userSignOut;
          case 'user:signup':
            return _SgmntfY_._functions.userSignUp;
          case 'user:subscribe':
            return _SgmntfY_._functions.userSubscribe;
          case 'user:unsubscribe':
            return _SgmntfY_._functions.userUnsubscribe;
          case 'user:update':
            return _SgmntfY_._functions.userInfoUpdate;
          case 'event:custom':
            return _SgmntfY_._functions.customEvent;
          case 'event:interaction':
            return _SgmntfY_._functions.interaction;
          case 'user:form':
            return _SgmntfY_._functions.userForm;
          case 'category:view':
            return _SgmntfY_._functions.categoryView;
          case 'category:click':
            return _SgmntfY_._functions.categoryClick;
          case 'banner:impression':
            return _SgmntfY_._functions.bannerImpression;
          case 'banner:click':
            return _SgmntfY_._functions.bannerClick;
          case 'banner:update':
            return _SgmntfY_._functions.bannerUpdate;
          case 'bannergroup:view':
            return _SgmntfY_._functions.bannerGroupView;
          case 'bannergroup:detail':
            return _SgmntfY_._functions.bannerGroupDetail;
          default:
            return function (params) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Unexpected Command: ' + name);
            };
        }
      },
      getDataLayerFunction: function (name, params) {
        switch (name.toLowerCase()) {
          case 'page':
            return _SgmntfY_._functions.pageView;
          case 'product':
            return _SgmntfY_._functions.productView;
          case 'basket':
            switch (params['step'].toLowerCase()) {
              case 'add':
                return _SgmntfY_._functions.addToBasket;
              case 'remove':
                return _SgmntfY_._functions.removeFromBasket;
              case 'clear':
                return _SgmntfY_._functions.clearBasket;
              default:
                return function (params) {
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Unexpected Basket Operations Step: ' + params['step']);
                }
            }
          case 'checkout':
            switch (params['step'].toLowerCase()) {
              case 'basket':
                return _SgmntfY_._functions.checkoutViewBasket;
              case 'customer':
                return _SgmntfY_._functions.checkoutCustomerInfo;
              case 'payment':
                return _SgmntfY_._functions.checkoutPaymentInfo;
              case 'purchase':
                return _SgmntfY_._functions.checkoutPurchase;
              default:
                return function (params) {
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Unexpected Checkout Step: ' + params['step']);
                }
            }
          case 'user':
            switch (params['step'].toLowerCase()) {
              case 'signin':
                return _SgmntfY_._functions.userSignIn;
              case 'signout':
                return _SgmntfY_._functions.userSignOut;
              case 'signup':
                return _SgmntfY_._functions.userSignUp;
              case 'subscribe':
                return _SgmntfY_._functions.userSubscribe;
              case 'unsubscribe':
                return _SgmntfY_._functions.userUnsubscribe;
              case 'update':
                return _SgmntfY_._functions.userInfoUpdate;
              default:
                return function (params) {
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Unexpected User Operations Step: ' + params['step']);
                }
            }
          case 'interaction':
            return _SgmntfY_._functions.interaction;
          case 'form':
            return _SgmntfY_._functions.userForm;
          case 'banners':
            return _SgmntfY_._functions.bannerGroupView;
          case 'banner':
            switch (params['type'].toLowerCase()) {
              case 'impression':
                return _SgmntfY_._functions.bannerImpression;
              case 'click':
                return _SgmntfY_._functions.bannerClick;
              case 'update':
                return _SgmntfY_._functions.bannerUpdate;
              default:
                return function (params) {
                  _SgmntfY_.LOG_MESSAGE('WARN', 'Unexpected Banner Operations Type: ' + params['type']);
                }
            }
          default:
            return function (params) {
              _SgmntfY_.LOG_MESSAGE('WARN', 'Unexpected Command: ' + name);
            };
        }
      },
      callFunction: function (commands) {
        // multiple commands
        var requestDatas = [];
        commands = commands || [];
        for (var i = 0; i < commands.length; i++) {
          var command = commands[i];
          var commandFunction = _SgmntfY_._functions.getFunction(command[0]);
          var commandArguments = Array.prototype.slice.call(command, 1);
          try {
            var requestData = commandFunction.apply(null, commandArguments);
            if (requestData) {
              requestDatas = requestDatas.concat(requestData);
            }
            _SgmntfY_.LOG_MESSAGE('INFO', 'Event triggered: ' + command[0]);
          } catch(err) {
            _SgmntfY_.LOG_MESSAGE('Error', "Can't convert command(" + command[0] + ") into request data. Details: " + err);
          }
        }
        _SgmntfY_._sendRequestToServer(requestDatas);
      },
      setApiKey: function (apiKey, skipStyle) {
        _SgmntfY_._variables.apiKey = apiKey;
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Api Key: ' + apiKey);
        if (skipStyle) {
          _SgmntfY_.LOG_MESSAGE('INFO', 'Account specific style is disabled, skipping...');
        } else {
          var cssFile = _SgmntfY_._variables.segmentifyCDNUrl + apiKey + "/segmentify.css";
          _SgmntfY_.LOG_MESSAGE('INFO', 'Loading account specific css file: ' + cssFile);
          _SgmntfY_._loadCSS(cssFile);
        }

        if (_SgmntfY_._isNotEmpty(_SgmntfY_._variables.apiKey)) {
          _SgmntfY_._consumeNextPageQueue();
          _SgmntfY_._consumeRetryQueue();
        }
      },
      setLogLevel: function (logLevel) {
        var logLevelObject = _SgmntfY_.LOG_LEVELS[logLevel];
        if (typeof logLevelObject != 'undefined') {
          _SgmntfY_._variables.logLevel = logLevelObject;
          _SgmntfY_.LOG_MESSAGE('DEBUG', 'Segmentify Log Level Changed to: ' + logLevel);
        }
      },
      setVariables: function (variables) {
        variables = variables || {};
        _SgmntfY_._extend(_SgmntfY_._variables, variables);
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Segmentify Variables are updated - New Values: ' + variables);
      },
      setUserId: function (userId) {
        var oldUserId = _SgmntfY_._getUserId();
        _SgmntfY_._storePersistentData(_SgmntfY_._variables.userStorageKey, userId, 180);
        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Segmentify User Id Changed to: ' + userId);
        if (oldUserId != userId) {
          _SgmntfY_._updateUserAndSessionId(1);
          var data = {};
          data['oldUserId'] = oldUserId || '';
          return _SgmntfY_._prepareRequest(data, 'USER_CHANGE');
        }
      },
      viewProduct: function (productId) {
        _SgmntfY_._addViewedProduct(productId);
      },
      pageView: function (data) {
        data = data || {};
        return _SgmntfY_._prepareRequest(data, "PAGE_VIEW");
      },
      productView: function (data) {
        data = data || {};
        // don't touch below line
        // although engine doesn't use productUrl parameter, it is used for product metadata (only usage)
        data.productUrl = data['productUrl'] || data['url'] || document.URL;
        data.fromStore = data.fromStore || false;
        if (typeof data.productId === 'number') {
          data.productId = data.productId.toString();
        }
        if (typeof data.categories === 'string') {
          if (data.categories.indexOf('|') != -1) {
            var catArray = data.categories.split('|');
            data.categories = [];
            for (var idx in catArray) {
              if (catArray.hasOwnProperty(idx)) {
                data.categories.push(catArray[idx].trim());
              }
            }
          } else {
            data.categories = [data.categories];
          }
        } else {
          // trim categories
          for (var i in data.categories) {
            if (data.categories.hasOwnProperty(i)) {
              if (typeof data.categories[i] === "string") data.categories[i] = data.categories[i].trim();
            }
          }
        }
        data['categories'] = (data['categories'] || []).filter(_SgmntfY_._clearNull);
        data['source'] = data['source'] || _SgmntfY_._sourceOfUrl();
        var clickedBanners = _SgmntfY_._getClickedBanners();
        if (clickedBanners.length > 0) {
          var activeBanners = [];
          for (var i = 0; i < clickedBanners.length; ++i) {
            var basic = _SgmntfY_._split(clickedBanners[i], ':', 4);
            if (basic.length === 4 && !isNaN(parseInt(basic[2]))) {
              activeBanners.push({title: basic[0], group: basic[1], order: parseInt(basic[2])});
            }
          }
          data['activeBanners'] = activeBanners;
        }
        if (_SgmntfY_._variables.skipProductDetail.device.indexOf(_SgmntfY_._variables.ua.type) >= 0) {
          data['noUpdate'] = true;
        }

        //extract product data from meta tags if necessary
        _SgmntfY_._extractProductDataFromMetaTags(data);
        //add product to viewed products
        _SgmntfY_._addViewedProduct(data.productId, data.categories, data.category);
        // send request
        return _SgmntfY_._prepareRequest(data, "PRODUCT_VIEW");
      },
      productDetail: function (data) {
        data = data || {};
        return _SgmntfY_._prepareRequest(data, "INTERNAL_PRODUCT");
      },
      addToBasket: function (data) {
        data = data || {};
        data['step'] = 'add';
        data['quantity'] = data['quantity'] || 1;
        data['fromStore'] = data['fromStore'] || false;
        var clickedProds = _SgmntfY_._getClickedProducts();
        var instanceIds = clickedProds[data.productId] || [];
        data["instanceIds"] = instanceIds;
        var offlineIds = _SgmntfY_._getActiveOfflines();
        Array.prototype.push.apply(data['instanceIds'], offlineIds);
        var clickedBanners = _SgmntfY_._getClickedBanners();
        if (clickedBanners.length > 0) {
          var activeBanners = [];
          for (var i = 0; i < clickedBanners.length; ++i) {
            var basic = _SgmntfY_._split(clickedBanners[i], ':', 4);
            if (basic.length === 4 && !isNaN(parseInt(basic[2]))) {
              activeBanners.push({title: basic[0], group: basic[1], order: parseInt(basic[2])});
            }
          }
          data['activeBanners'] = activeBanners;
        }
        if (typeof data['nextPage'] === 'undefined') {
          data['nextPage'] = true;
        }

        data["basketId"] = data['basketId'] || "basket_" + _SgmntfY_._getUserId(); // if basketId is not supplied use userId
        return _SgmntfY_._prepareRequest(data, "BASKET_OPERATIONS");
      },
      removeFromBasket: function (data) {
        data = data || {};
        data["step"] = "remove";
        if (typeof data['nextPage'] === 'undefined') {
          data['nextPage'] = true;
        }
        data["basketId"] = data['basketId'] || "basket_" + _SgmntfY_._getUserId(); // if basketId is not supplied use userId
        return _SgmntfY_._prepareRequest(data, "BASKET_OPERATIONS");
      },
      clearBasket: function (data) {
        data = data || {};
        data["step"] = "clear";
        if (typeof data['nextPage'] === 'undefined') {
          data['nextPage'] = true;
        }
        data["basketId"] = data['basketId'] || "basket_" + _SgmntfY_._getUserId(); // if basketId is not supplied use userId
        return _SgmntfY_._prepareRequest(data, "BASKET_OPERATIONS");
      },
      checkoutViewBasket: function (data) {
        data = data || {};
        data["step"] = "view-basket";
        if (data.hasOwnProperty('productList')) {
          for (var p = 0; p < data["productList"].length; ++p) {
            data['productList'][p]['quantity'] = data['productList'][p]['quantity'] || 1;
          }
        }
        data["basketId"] = data['basketId'] || "basket_" + _SgmntfY_._getUserId(); // if basketId is not supplied use userId
        return _SgmntfY_._prepareRequest(data, "CHECKOUT");
      },
      checkoutCustomerInfo: function (data) {
        data = data || {};
        data["step"] = "customer-info";
        data["basketId"] = data['basketId'] || "basket_" + _SgmntfY_._getUserId(); // if basketId is not supplied use userId
        return _SgmntfY_._prepareRequest(data, "CHECKOUT");
      },
      checkoutPaymentInfo: function (data) {
        data = data || {};
        data["step"] = "payment-info";
        data["basketId"] = data['basketId'] || "basket_" + _SgmntfY_._getUserId(); // if basketId is not supplied use userId
        return _SgmntfY_._prepareRequest(data, "CHECKOUT");
      },
      checkoutPurchase: function (data) {
        data = data || {};
        data["step"] = "purchase";
        data["basketId"] = data['basketId'] || "basket_" + _SgmntfY_._getUserId(); // if basketId is not supplied use userId
        var clickedProds = _SgmntfY_._getClickedProducts();
        var offlineIds = _SgmntfY_._getActiveOfflines();
        if (data.hasOwnProperty('productList')) {
          for (var p = 0; p < data["productList"].length; ++p) {
            data['productList'][p]['instanceIds'] = clickedProds[data['productList'][p]['productId']] || [];
            Array.prototype.push.apply(data['productList'][p]['instanceIds'], offlineIds);
            if (_SgmntfY_._variables.ga.enabled && data['productList'][p]['instanceIds'].length > 0) {
              try {
                var gaPrice = parseFloat(data['productList'][p]['quantity']) * parseFloat(data['productList'][p]['price']);
                ga('send', 'event', 'Purchase-Segmentify', data['productList'][p]['productId'], _SgmntfY_._variables.ua.type, gaPrice);
              } catch (err) {/* do nothing */}
            }
            data['productList'][p]['quantity'] = data['productList'][p]['quantity'] || 1;
            data['productList'][p]['fromStore'] = data['productList'][p]['fromStore'] || false;
          }
        }
        var clickedBanners = _SgmntfY_._getClickedBanners();
        if (clickedBanners.length > 0) {
          var activeBanners = [];
          for (var i = 0; i < clickedBanners.length; ++i) {
            var basic = _SgmntfY_._split(clickedBanners[i], ':', 4);
            if (basic.length === 4 && !isNaN(parseInt(basic[2]))) {
              activeBanners.push({title: basic[0], group: basic[1], order: parseInt(basic[2])});
            }
          }
          data['activeBanners'] = activeBanners;
        }

        /* Active Campaigns */
        var activeCampaigns = _SgmntfY_._getActiveCampaigns();
        for (var key in activeCampaigns) {
          if (activeCampaigns.hasOwnProperty(key)) {
            var status = activeCampaigns[key];
            if (typeof status === 'string') {
              var logKey = '';
              if (status == 'click' || status == 'close') {
                // send actual event for both click and close
                _SgmntfY_._variables.segmentifyObj('event:custom', {
                  'type': 'collectGMVPopup',
                  'params': {
                    'productCount': 1,
                    'totalAmount': data["totalPrice"],
                    'logInstanceId': key,
                    'logKey': 'purchase_actual'
                  }
                });
                if (status == 'click') {
                  logKey = 'viewed_clicked';
                } else if (status == 'close') {
                  logKey = 'viewed_exited';
                }
              } else if (status == 'control') {
                logKey = 'purchase_control';
              } else if (status == 'actual') {
                logKey = 'purchase_actual';
              }
              if (logKey) {
                _SgmntfY_._variables.segmentifyObj('event:custom', {
                  'type': 'collectGMVPopup',
                  'params': {
                    'productCount': 1,
                    'totalAmount': data["totalPrice"],
                    'logInstanceId': key,
                    'logKey': logKey
                  }
                });
              }
            }
          }
        }

        return _SgmntfY_._prepareRequest(data, "CHECKOUT");
      },
      userSignIn: function (data) {
        data = data || {};
        data["step"] = "signin";
        data['isLogin'] = true;
        data['isRegistered'] = true;
        return _SgmntfY_._prepareRequest(data, "USER_OPERATIONS");
      },
      userSignOut: function (data) {
        data = data || {};
        data["step"] = "signout";
        data['isLogin'] = false;
        return _SgmntfY_._prepareRequest(data, "USER_OPERATIONS");
      },
      userSignUp: function (data) {
        data = data || {};
        data["step"] = "signup";
        data['isRegistered'] = true;

        var activeCampaigns = _SgmntfY_._getActiveCampaigns();
        for (var key in activeCampaigns) {
          if (activeCampaigns.hasOwnProperty(key)) {
            var status = activeCampaigns[key];
            if (typeof status === 'string') {
              var logKey = '';
              if (status == 'click' || status == 'close') {
                // send actual event for both click and close
                _SgmntfY_._variables.segmentifyObj('event:custom', {
                  'type': 'collectGMVPopup',
                  'params': {
                    'productCount': 1,
                    'totalAmount': 0,
                    'logInstanceId': key,
                    'logKey': 'register_actual'
                  }
                });
                if (status == 'click') {
                  logKey = 'viewed_clicked_registered';
                } else if (status == 'close') {
                  logKey = 'viewed_exited_registered' + status.substring(5, 6);
                }
              } else if (status == 'control') {
                logKey = 'register_control';
              } else if (status == 'actual') {
                logKey = 'register_actual';
              }
              if (logKey) {
                _SgmntfY_._variables.segmentifyObj('event:custom', {
                  'type': 'collectGMVPopup',
                  'params': {
                    'productCount': 1,
                    'totalAmount': 0,
                    'logInstanceId': key,
                    'logKey': logKey
                  }
                });
              }
            }
          }
        }
        return _SgmntfY_._prepareRequest(data, "USER_OPERATIONS");
      },
      userSubscribe: function (data) {
        data = data || {};
        data["step"] = "subscribe";
        return _SgmntfY_._prepareRequest(data, "USER_OPERATIONS");
      },
      userUnsubscribe: function (data) {
        data = data || {};
        data["step"] = "unsubscribe";
        return _SgmntfY_._prepareRequest(data, "USER_OPERATIONS");
      },
      userInfoUpdate: function (data) {
        data = data || {};
        data["step"] = "update";
        if (typeof data["isLogin"] !== 'undefined') {
          data["isRegistered"] = (data['isLogin'] === "true" || data["isLogin"] === true) ? "true" : data['isRegistered'];
        }
        return _SgmntfY_._prepareRequest(data, "USER_OPERATIONS");
      },
      userForm: function (data) {
        data = data || {};
        return _SgmntfY_._prepareRequest(data, "FORM");
      },
      customEvent: function (data) {
        data = data || {};
        return _SgmntfY_._prepareRequest(data, "CUSTOM_EVENT");
      },
      interaction: function (data) {
        data = data || {};
        if (typeof data['nextPage'] === 'undefined') {
          data['nextPage'] = true;
        }
        if (_SgmntfY_._isNotEmpty(data.instanceId)) {
          if (!(data.instanceId.startsWith('cmp_'))) {
            _SgmntfY_._addActiveCampaign(data.instanceId, data.type);
          }
          return _SgmntfY_._prepareRequest(data, "INTERACTION");
        }
      },
      categoryView: function (data) {
        data = data || {};
        data['type'] = 'view';
        if (typeof data['productIds'] === 'string') {
          data['productIds'] = [data['productIds']];
        }
        return _SgmntfY_._prepareRequest(data, 'CATEGORY_OPERATIONS');
      },
      categoryClick: function (data) {
        data = data || {};
        data['type'] = 'click';
        if (typeof data['productIds'] === 'string') {
          data['productIds'] = [data['productIds']];
        }
        if (typeof data['nextPage'] === 'undefined') {
          data['nextPage'] = true;
        }
        return _SgmntfY_._prepareRequest(data, 'CATEGORY_OPERATIONS');
      },
      bannerImpression: function (data) {
        data = data || {};
        data['type'] = 'impression';
        return _SgmntfY_._prepareRequest(data, 'BANNER_OPERATIONS');
      },
      bannerClick: function (data) {
        data = data || {};
        data['type'] = 'click';
        if (typeof data['nextPage'] === 'undefined') {
          data['nextPage'] = true;
        }
        _SgmntfY_._addClickedBanner(data['title'], data['group'], data['order'], data['url']);
        return _SgmntfY_._prepareRequest(data, 'BANNER_OPERATIONS');
      },
      bannerUpdate: function (data) {
        data = data || {};
        data['type'] = 'update';
        return _SgmntfY_._prepareRequest(data, 'BANNER_OPERATIONS');
      },
      bannerGroupView: function (data) {
        data = data || {};
        return _SgmntfY_._prepareRequest(data, 'BANNER_GROUP_VIEW');
      },
      bannerGroupDetail: function (data) {
        data = data || {};
        return _SgmntfY_._prepareRequest(data, "INTERNAL_BANNER_GROUP");
      }
    },
    _prepareRequest: function (params, eventName) {
      // if don't send flag is set, ignore request
      if (typeof params['noSend'] != 'undefined' && params['noSend'] == "true") {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "No send flag is set for event: " + eventName + ", ignoring event");
        return;
      }
      // if page is translated (chrome), ignore request
      if (_SgmntfY_._getJq()('html').hasClass('translated-ltr') || _SgmntfY_._getJq()('html').hasClass('translated-rtl')) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Page is translated, ignoring event");
        return;
      }
      // request object
      var request = {
        data: {
          name: eventName,
          userId: _SgmntfY_._getUserId(),
          sessionId: _SgmntfY_._getSessionId(),
          testMode: _SgmntfY_._getTestMode() || 'false',
          device: _SgmntfY_._variables.ua.type || 'PC',
          noProcess: params.noProcess || false,
          tryCount: 0,
          nextPage: params['nextPage'] || false,
          params: params['params'] || {},
          pageUrl: params['pageUrl'] || document.URL,
          referrer: params['referrer'] || document.referrer,
          browser: params['browser'] || _SgmntfY_._variables.ua.name,
          os: params['os'] || _SgmntfY_._variables.ua.os,
          userAgent: params['userAgent'] || _SgmntfY_._variables.ua.agentString
        },
        originalParams: params,
        eventName: eventName
      };
      // add smart recommendation items if necessary
      if (_SgmntfY_._variables.constants.smartRecommendationSourceLimit > 0) {
        var lastProducts = params['lastProducts'] || _SgmntfY_._getViewedProducts(_SgmntfY_._variables.constants.smartRecommendationSourceLimit);
        if (typeof lastProducts === 'string') {
          lastProducts = [lastProducts];
        }
        if (_SgmntfY_._getJq().isArray(lastProducts)) {
          lastProducts = lastProducts.filter(_SgmntfY_._clearNull);
          request.data['lastProducts'] = lastProducts;
        }
        var topViewedCategories = _SgmntfY_._getViewedCategories(_SgmntfY_._variables.constants.smartRecommendationSourceLimit);
        var topCategories = params['topCategories'] || topViewedCategories.map(function (obj) {return obj.x;});
        if (typeof topCategories === 'string') {
          topCategories = [topCategories];
        }
        if (_SgmntfY_._getJq().isArray(topCategories)) {
          topCategories = topCategories.filter(_SgmntfY_._clearNull);
          request.data['topCategories'] = topCategories;
        }
      }
      if (typeof params.recommendationCallback === 'function') {
        _SgmntfY_._getJq().extend(request, {recommendationCallback: params.recommendationCallback});
      }

      // check api key
      if (_SgmntfY_._isEmpty(_SgmntfY_._variables.apiKey)) {
        _SgmntfY_.LOG_MESSAGE('ERROR', "Api Key is not set, not sending event: " + eventName);
        return; // error no api key is set
      }

      // check required params
      var requiredParams = _SgmntfY_._variables.requiredParams[eventName];
      for (var i = 0; i < requiredParams.length; ++i) {
        if (_SgmntfY_._isNotEmpty(params[requiredParams[i]])) {
          request.data[requiredParams[i]] = params[requiredParams[i]];
          if (typeof request.data[requiredParams[i]] === "string") request.data[requiredParams[i]] = request.data[requiredParams[i]].trim();
        } else {
          _SgmntfY_.LOG_MESSAGE('ERROR', "Missing parameter[" + requiredParams[i] + "] in event: " + eventName);
          return; // error required parameter is missing
        }
      }
      // add optional parameters
      var optionalParams = _SgmntfY_._variables.optionalParams[eventName];
      for (var i = 0; i < optionalParams.length; ++i) {
        if (_SgmntfY_._isNotEmpty(params[optionalParams[i]])) {
          request.data[optionalParams[i]] = params[optionalParams[i]];
          if (typeof request.data[optionalParams[i]] === "string") request.data[optionalParams[i]] = request.data[optionalParams[i]].trim();
        }
      }

      if (typeof request.data['nextPage'] === 'boolean' && request.data['nextPage'] === true) {
        _SgmntfY_._addToNextPageQueue(request);
        return null;
      } else {
        return request;
      }
    },
    // Persistent Data Functions
    _storePersistentData: function setCookie(cname, cvalue, exdays, useWebStorage) {
      //check for web storage
      if (typeof(Storage) !== "undefined" && useWebStorage) {
        try {
          localStorage.setItem(cname, cvalue);
          _SgmntfY_.LOG_MESSAGE('DEBUG', "Segmentify Persistent Data (Local Storage) Update: " + cname + ": " + cvalue);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('ERROR', "Can't store Persistent Data (Local Storage) Update: " + cname + ": " + cvalue);
        }
      } else {
        if (typeof cvalue === 'string') {
          cvalue = encodeURIComponent(cvalue);
        }
        var d, expires = "", domain = "", cookie;
        if (exdays) {
          d = new Date();
          d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
          expires = "; expires=" + d.toGMTString();
        }
        if (_SgmntfY_._variables.domain && _SgmntfY_._variables.domain.split(".").length >= 2) {
          domain = "; domain=" + _SgmntfY_._variables.domain;
        }
        cookie = cname + "=" + cvalue + expires + domain + "; path=/";
        try {
          document.cookie = cookie;
          _SgmntfY_.LOG_MESSAGE('DEBUG', "Segmentify Persistent Data (Cookie) Update: " + cookie);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('ERROR', "Can't store Persistent Data (Cookie) Update: " + cookie);
        }
      }
    },
    _getPersistentData: function getCookie(cname, useWebStorage) {
      if (typeof(Storage) !== "undefined" && useWebStorage) {
        try {
          return localStorage.getItem(cname);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('ERROR', "Can't get Persistent Data (Local Storage): " + cname);
          return null;
        }
      } else {
        var name = cname + "=";
        try {
          var ca = document.cookie.split(';');
          for (var i = 0; i < ca.length; i++) {
            var c = ca[i].trim();
            if (c.indexOf(name) == 0) return decodeURIComponent(c.substring(name.length, c.length));
          }
          return "";
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('ERROR', "Can't get Persistent Data (Cookie): " + cname);
          return null;
        }
      }
    },
    _clearProductUrl: function (url) {
      var parameters = ['_sgm_source', '_sgm_campaign', '_sgm_action', '_sgm_type', '_sgm_test', 'utm_source', 'utm_medium',
        'utm_term', 'utm_content', 'utm_campaign', 'utm_type', 'p_id', 'gclid', 'ds_p', 'ds_eid', 'ds_aid', 'ds_e', 'ds_c',
        'ds_cid', 'ds_ag', 'ds_agid', 'ds_k', 'ds_kid', 'ds_kids', 'ds_kidnl', 'gclick', 'gsrc', 'gclsrc'];
      return _SgmntfY_._stripQueryParameters(url, parameters);
    },
    _stripQueryParameters: function (url, parameters) {
      if (typeof parameters === "undefined" || !parameters) return url;
      else if (typeof parameters === "string") parameters = [parameters];
      //prefer to use l.search if you have a location/link object
      var urlParts= (url || '').split('?');
      if (urlParts.length >= 2) {
        var prefixes = [];
        for(var i = 0; i < (parameters || []).length; i++) {
          prefixes.push(encodeURIComponent(parameters[i])+'=');
        }

        var paramPairs = urlParts[1].split(/[&;]/g);
        //reverse iteration as may be destructive
        for (var i = paramPairs.length; i-- > 0;) {
          for (var j = 0; j < prefixes.length; j++) {
            //idiom for string.startsWith
            if (paramPairs[i].lastIndexOf(prefixes[j], 0) !== -1) {
              paramPairs.splice(i, 1);
              break;
            }
          }
        }

        if (paramPairs.length > 0) return urlParts[0] + '?' + paramPairs.join('&');
        else return urlParts[0];
      }
      else return url;
    },
    _getQueryParameter: function (name, url) {
      var trackedUrl = location.search;
      if (typeof url !== "undefined") {
        trackedUrl = url;
      }
      name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var regex   = new RegExp("[\\?&]" + name + "=([^&#]*)"),
          results = regex.exec(trackedUrl);
      return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    },
    _sendTrackedEvent: function (url) {
      var _sgm_campaign, _sgm_action, _sgm_source, _sgm_type;

      // v2 checks
      if (_SgmntfY_._getQueryParameter('utm_source', url) == 'segmentify') {
        _sgm_campaign = _SgmntfY_._getQueryParameter('utm_campaign', url);
        _sgm_action = _SgmntfY_._getQueryParameter('utm_medium', url);
        _sgm_source = _SgmntfY_._getQueryParameter('utm_content', url);
        _sgm_type = _SgmntfY_._getQueryParameter('utm_type', url);
      }
      // v1 checks
      else {
        _sgm_campaign = _SgmntfY_._getQueryParameter('_sgm_campaign', url);
        _sgm_action = _SgmntfY_._getQueryParameter('_sgm_action', url);
        _sgm_source = _SgmntfY_._getQueryParameter('_sgm_source', url);
        _sgm_type = _SgmntfY_._getQueryParameter('_sgm_type', url);
      }

      if (_sgm_campaign && _sgm_action && _sgm_source) {
        if (!(_sgm_campaign.startsWith('cmp_'))) {
          if (_sgm_source == 'notification') {
            _SgmntfY_._addActiveOffline(_sgm_campaign);
          } else {
            _SgmntfY_._addClickedProduct(_sgm_source, _sgm_campaign, _sgm_type);
          }
        }

        _SgmntfY_.LOG_MESSAGE('DEBUG', 'Sending tracked event: ' + _sgm_action + ' - ' + _sgm_campaign + ' - ' + _sgm_source + ' - ' + _sgm_type);
        if (_sgm_campaign == 'category-listing') {
          _SgmntfY_._variables.segmentifyObj('category:click', {productIds: [_sgm_source]});
        } else {
           var _instanceId = _sgm_type ? _sgm_campaign + '|' + _sgm_type : _sgm_campaign;
          _SgmntfY_._variables.segmentifyObj("event:interaction", {
            type: _sgm_action,
            interactionId: _sgm_source,
            instanceId: _instanceId
          });

          _SgmntfY_._variables.segmentifyObj('event:custom', {
            type: 'click',
            params: {
              productId: _sgm_source,
              channel: 'segmentify'
            }
          });
        }
      }
    },
    _setTestMode: function (paramMode) {
      var mode = paramMode || _SgmntfY_._getQueryParameter('_sgm_test');
      _SgmntfY_._toggleTestMode(mode);

      // check current test mode
      if (_SgmntfY_._getExtensionStatus() != 'exists' && _SgmntfY_._getTestMode() == 'true') {
        try {
          var testModeTemplate = [
            '<div class="sgm-test-mode-header">',
            '<a href="http://www.segmentify.com" target="_blank" class="sgm-logo"> </a>',
            '<a href="https://chrome.google.com/webstore/detail/segmentify/dhcffckfimabfhbbjdngnajhnlohfjeo" target="_blank" class="sgm-ext"><span>Get <strong>Chrome Extension</strong> Now!</span></a>',
            '<span class="sgm-test-mode-Show-Hide" data-hide="Hide" data-show="Show"></span>',
            '<div class="sgm-test-mode-key">',
            '<h2 id="sgm-test-mode-message"> Your browser is in<strong>Segmentify Test Mode</strong> </h2>',
            '<div class="sgm-test-mode-radio">',
            '<input class="sgm-tgl sgm-tgl-ios" id="sgm-cb1" type="checkbox" checked>',
            '<label class="sgm-tgl-btn" for="sgm-cb1"></label>',
            '</div>',
            '</div>',
            '</div>'
          ].join("\n");

          setTimeout(function () {
            _SgmntfY_._getJq()("body").prepend(testModeTemplate);
            if (_SgmntfY_._variables.ua.name.toLowerCase() !== "chrome") {
              _SgmntfY_._getJq()(".sgm-test-mode-header .sgm-ext").hide();
            }
            _SgmntfY_._getJq()("body").addClass("sgm-test-body");

            _SgmntfY_._getJq()('#sgm-cb1').change(function () {
              var $this = _SgmntfY_._getJq()(this);
              setTimeout(function () {
                _SgmntfY_._toggleTestMode($this.is(':checked') ? 'on' : 'off');
              }, 400);
            });

            _SgmntfY_._getJq()(".sgm-test-mode-Show-Hide").click(function () {
              _SgmntfY_._getJq()("body").toggleClass("sgm-test-header-open");
            });
          }, 800);
        } catch (err) {
          _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't show test mode header: " + err);
        }
      }
    },
    _getTestMode: function () {
      return _SgmntfY_._getPersistentData(_SgmntfY_._variables.testMode);
    },
    _toggleTestMode: function (mode) {
      if (mode === 'on') {
        _SgmntfY_._getJq()('#sgm-test-mode-message').html("Your browser is in<strong>Segmentify Test Mode</strong>");
        _SgmntfY_._getJq()('#sgm-test-mode-message').find("strong").css("color", "#50BC61");
        _SgmntfY_.LOG_MESSAGE('INFO', "Segmentify Test Mode activated");
        _SgmntfY_._storePersistentData(_SgmntfY_._variables.testMode, 'true', 180); // expire in 180 days
      } else if (mode === 'off') {
        _SgmntfY_._getJq()('#sgm-test-mode-message').html("<strong>Segmentify Test Mode</strong> is disabled");
        _SgmntfY_._getJq()('#sgm-test-mode-message').find("strong").css("color", "#fff");
        _SgmntfY_.LOG_MESSAGE('INFO', "Segmentify Test Mode deactivated");
        _SgmntfY_._storePersistentData(_SgmntfY_._variables.testMode, 'false', 180); // expire in 180 days
        window.alert('You are out of Segmentify Test Mode, you will not see test campaigns.');
        window.location = _SgmntfY_._stripQueryParameters(document.URL, '_sgm_test');
      }
    },
    _getSessionId: function () {
      return _SgmntfY_._getPersistentData(_SgmntfY_._variables.sessionStorageKey);
    },
    _getUserId: function () {
      return _SgmntfY_._getPersistentData(_SgmntfY_._variables.userStorageKey);
    },
    _shuffle: function (o) {
      for (var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
      return o;
    },
    _getClickedBanners: function () {
      try {
        var clickedBannersStorage = _SgmntfY_._variables.storage.clickedBanners;
        return JSON.parse(_SgmntfY_._getPersistentData(clickedBannersStorage.key, clickedBannersStorage.local)) || [];
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't read clicked banners: " + err);
      }
      return [];
    },
    _addClickedBanner: function (title, group, order, url) {
      if (typeof title === 'undefined' || typeof group === 'undefined' || typeof order === 'undefined' || typeof url === 'undefined') {
        return;
      }
      var bannerKey = title + ':' + group + ':' + order + ':' + url;
      var clickedBanners = _SgmntfY_._getClickedBanners();
      if (clickedBanners.indexOf(bannerKey) == -1) {
        clickedBanners.push(bannerKey);
      }

      if (clickedBanners.length > _SgmntfY_._variables.constants.clickedBannersLimit) {
        clickedBanners = clickedBanners.splice(clickedBanners.length - _SgmntfY_._variables.constants.clickedBannersLimit);
      }
      var clickedBannersStorage = _SgmntfY_._variables.storage.clickedBanners;
      _SgmntfY_._storePersistentData(clickedBannersStorage.key, JSON.stringify(clickedBanners), 0, clickedBannersStorage.local);
    },
    _getClickedProducts: function () {
      try {
        var clickedProductsStorage = _SgmntfY_._variables.storage.clickedProducts;
        return JSON.parse(_SgmntfY_._getPersistentData(clickedProductsStorage.key, clickedProductsStorage.local)) || {};
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't read clicked products: " + err);
      }
      return {};
    },
    _addClickedProduct: function (productId, instanceId, recoType) {
      var clickedProducts = _SgmntfY_._getClickedProducts();
      if (!clickedProducts.hasOwnProperty(productId)) {
        clickedProducts[productId] = [];
      }
      delete clickedProducts[instanceId];
      if (recoType) instanceId = instanceId + '|' + recoType;
      if (clickedProducts[productId].indexOf(instanceId) == -1) {
        clickedProducts[productId].push(instanceId);
      }
      var keys = Object.keys(clickedProducts);
      if (keys.length > _SgmntfY_._variables.constants.clickedProductsLimit) {
        var limit = keys.length - _SgmntfY_._variables.constants.clickedProductsLimit;
        for (var i = 0; i < limit; ++i) {
          try {
            delete clickedProducts[keys[i]];
          } catch (err) {}
        }
      }

      var clickedProductsStorage = _SgmntfY_._variables.storage.clickedProducts;
      _SgmntfY_._storePersistentData(clickedProductsStorage.key, JSON.stringify(clickedProducts), 0, clickedProductsStorage.local);
    },
    _getActiveCampaigns: function () {
      try {
        var activeCampaignsStorage = _SgmntfY_._variables.storage.activeCampaigns;
        return JSON.parse(_SgmntfY_._getPersistentData(activeCampaignsStorage.key, activeCampaignsStorage.local)) || {};
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't read active campaigns: " + err);
      }
      return {};
    },
    _addActiveCampaign: function (instanceId, status) {
      if (typeof instanceId == 'undefined' || instanceId == 'undefined' || instanceId == '') return;
      if (status != 'click' && status != 'close' && status != 'control' && status != 'actual') return;
      if (instanceId.indexOf('|') != -1) {
        instanceId = instanceId.substring(0, instanceId.indexOf('|'));
      }
      var activeCampaigns = _SgmntfY_._getActiveCampaigns();
      activeCampaigns[instanceId] = status;
      var activeCampaignsStorage = _SgmntfY_._variables.storage.activeCampaigns;
      _SgmntfY_._storePersistentData(activeCampaignsStorage.key, JSON.stringify(activeCampaigns), 0, activeCampaignsStorage.local);
    },
    _getActiveOfflines: function () {
      try {
        var activeOfflinesStorage = _SgmntfY_._variables.storage.activeOfflines;
        return JSON.parse(_SgmntfY_._getPersistentData(activeOfflinesStorage.key, activeOfflinesStorage.local)) || [];
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't read active offlines: " + err);
      }
      return [];
    },
    _addActiveOffline: function (instanceId) {
      if (typeof instanceId == 'undefined' || instanceId == 'undefined' || instanceId == '') return;
      var activeOfflines = _SgmntfY_._getActiveOfflines();
      if (activeOfflines.indexOf(instanceId) == -1) {
        activeOfflines.push(instanceId);
        var activeOfflinesStorage = _SgmntfY_._variables.storage.activeOfflines;
        _SgmntfY_._storePersistentData(activeOfflinesStorage.key, JSON.stringify(activeOfflines), 0, activeOfflinesStorage.local);
      }
    },
    _getViewedProducts: function (count) {
      try {
        var viewedProductsStorage = _SgmntfY_._variables.storage.viewedProducts;
        var lastProducts = JSON.parse(_SgmntfY_._getPersistentData(viewedProductsStorage.key, viewedProductsStorage.local)) || [];
        if(typeof count !== "undefined") {
          return lastProducts.slice(0, count);
        }
        else return lastProducts;
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't read viewed products: " + err);
      }
      return [];
    },
    _getViewedCategories: function (count) {
      try {
        var viewedCategoriesStorage = _SgmntfY_._variables.storage.viewedCategories;
        var viewedCategories = JSON.parse(_SgmntfY_._getPersistentData(viewedCategoriesStorage.key, viewedCategoriesStorage.local)) || [];
        if (typeof count === 'undefined') {
          count = viewedCategories.length;
        }
        var topCategories = viewedCategories.slice(0).sort(function (cat1, cat2) {
          return cat1.y - cat2.y;
        });
        return topCategories.slice(-1 * count);
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't read viewed categories: " + err);
      }
      return [];
    },
    _addViewedProduct: function (productId, categories, category) {
      // store read product
      var readProducts = _SgmntfY_._getViewedProducts();
      var index = readProducts.indexOf(productId);
      if (index != -1) {
        readProducts.splice(index, 1);
      }
      readProducts.unshift(productId);
      // check above limit
      if (readProducts.length > _SgmntfY_._variables.constants.viewedProductsLimit) {
        readProducts = readProducts.splice(0, _SgmntfY_._variables.constants.viewedProductsLimit);
      }
      var viewedProductsStorage = _SgmntfY_._variables.storage.viewedProducts;
      _SgmntfY_._storePersistentData(viewedProductsStorage.key, JSON.stringify(readProducts), 0, viewedProductsStorage.local);

      // update top categories - algorithm LRU
      var viewedCategories = _SgmntfY_._getViewedCategories();
      var prodCategories = [];
      if (typeof category !== 'undefined' && category !== '') {
        var catArr = category.split(' > ');
        for (var i = 0; i < catArr.length; ++i) {
          var tmp = [];
          for (var j = 0; j <= i; ++j) {
            tmp.push(catArr[j].trim());
          }
          prodCategories.push(tmp.join(' > '));
        }
      } else {
        prodCategories = (categories || []).slice(); // clone array
      }
      // initialize
      for(var i = 0; i < prodCategories.length; i++) {
        prodCategories[i] = {x: prodCategories[i], y: 1};
      }
      // update in new prodCategories or move to new list
      var prodCategories2 = [];
      for(var i = 0; i < viewedCategories.length; i++) {
        var updated = false;
        for(var j = 0; !updated && j < prodCategories.length; j++) {
          // found exiting, update count
          if(viewedCategories[i].x == prodCategories[j].x) {
            prodCategories[j].y += viewedCategories[i].y;
            updated = true;
          }
        }
        if(!updated) {
          prodCategories2.push(viewedCategories[i]);
        }
      }
      // join two lists
      prodCategories = prodCategories2.concat(prodCategories);
      // check above limit, drop least used elements at the beginning
      if (prodCategories.length > _SgmntfY_._variables.constants.viewedCategoriesLimit) {
        prodCategories = prodCategories.splice(prodCategories.length - _SgmntfY_._variables.constants.viewedCategoriesLimit);
      }
      var viewedCategoriesStorage = _SgmntfY_._variables.storage.viewedCategories;
      _SgmntfY_._storePersistentData(viewedCategoriesStorage.key, JSON.stringify(prodCategories), 0, viewedCategoriesStorage.local);
    },
    _getDelayedActions: function () {
      try {
        var delayedActionsStorage = _SgmntfY_._variables.storage.delayedActions;
        return JSON.parse(_SgmntfY_._getPersistentData(delayedActionsStorage.key, delayedActionsStorage.local)) || [];
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('ERROR', "Can't read delayed actions: " + err);
      }
      return [];
    },
    _setDelayedActions: function (delayedActions) {
      var delayedActionsStorage = _SgmntfY_._variables.storage.delayedActions;
      _SgmntfY_._storePersistentData(delayedActionsStorage.key, JSON.stringify(delayedActions), 0, delayedActionsStorage.local);
    },
    _addDelayedAction: function (action) {
      var delayedActions = _SgmntfY_._getDelayedActions();
      for (var i = 0; i < delayedActions.length; i++) {
        if (delayedActions[i].params.actionId === action.params.actionId) return false;
      }
      var currentDate = new Date();
      if (action.delayDate.getTime() < currentDate.getTime()) return false;
      else {
        var type = action.type;
        var actionFunction = _SgmntfY_._actions[action.type];
        var params = action.params;
        var request = action.request;
        setTimeout(function () {
          var delayedActions = _SgmntfY_._getDelayedActions();
          var exist = false;
          for (var i = 0; i < delayedActions.length; i++) {
            if (delayedActions[i].params.actionId === action.params.actionId) exist = true;
          }
          if (exist) {
            _SgmntfY_.LOG_MESSAGE('INFO', 'Action(' + type + ') is triggered after after delay');
            actionFunction.call(null, params, request);
            _SgmntfY_._removeDelayedAction(params.actionId);
          }
        }, (action.delayDate.getTime() - currentDate.getTime()) + Math.floor(Math.random() * 750));
        delayedActions.push(action);
        _SgmntfY_._setDelayedActions(delayedActions);
        return true;
      }
    },
    _removeDelayedAction: function (actionId) {
      var delayedActions = _SgmntfY_._getDelayedActions();
      for (var i = 0; i < delayedActions.length; i++) {
        if (delayedActions[i].params.actionId === actionId) {
          delayedActions.splice(i, 1);
          _SgmntfY_._setDelayedActions(delayedActions);
          return;
        }
      }
    },
    _getRetryQueue: function () {
      try {
        var retryQueueStorage = _SgmntfY_._variables.storage.retryQueue;
        return JSON.parse(_SgmntfY_._getPersistentData(retryQueueStorage.key, retryQueueStorage.local)) || [];
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('ERROR', "Can't read retry queue: " + err);
      }
      return [];
    },
    _setRetryQueue: function (retryQueue) {
      var retryQueueStorage = _SgmntfY_._variables.storage.retryQueue;
      _SgmntfY_._storePersistentData(retryQueueStorage.key, JSON.stringify(retryQueue), 0, retryQueueStorage.local);
    },
    _addToRetryQueue: function (q) {
      var rq = _SgmntfY_._getRetryQueue();
      while (q.length > 0) {
        var ev = q.shift();
        var tc = ev.data.tryCount || 0;
        if (tc < _SgmntfY_._variables.constants.retryLimit) {
          ev.data.tryCount = tc + 1;
          if (_SgmntfY_._variables.isUnload) {
            ev.originalParams.discardResponse = 'true';
          }
          rq.push(ev);
        }
      }
      _SgmntfY_._setRetryQueue(rq);
    },
    _consumeRetryQueue: function () {
      var rq = _SgmntfY_._getRetryQueue();
      if (rq && rq.length > 0) {
        var q = [];
        while (rq.length > 0) {
          var ev = rq.shift();
          // update user and session id
          ev.data.userId = _SgmntfY_._getUserId();
          ev.data.sessionId = _SgmntfY_._getSessionId();
          q.push(ev);
        }
        _SgmntfY_._sendRequestToServer(q);
        _SgmntfY_._setRetryQueue([]);
      }
    },
    _getDataLayer: function () {
      return window[_SgmntfY_._variables.dataLayer];
    },
    _consumeDataLayer: function () {
      if (_SgmntfY_._variables.consumeDataLayer) {
        var dlq = [];
        var extractEvent = function (key, params) {
          if (params.hasOwnProperty('__processed__') && params['__processed__'] === true) return;
          var extendedParams = _SgmntfY_._extend(params, common);
          var func = _SgmntfY_._functions.getDataLayerFunction(key, extendedParams);
          var dle = func.apply(null, [JSON.parse(JSON.stringify(extendedParams))]);
          if (dle) dlq.push(dle);
        };
        var dataLayer = _SgmntfY_._getDataLayer() || {};
        var common = dataLayer['common'] || {};
        for (var key in dataLayer) {
          if (dataLayer.hasOwnProperty(key)) {
            if (key === 'common') {
              continue;
            }
            if (_SgmntfY_._getJq().isArray(dataLayer[key])) {
              for (var a = 0; a < dataLayer[key].length; ++a) {
                extractEvent(key, dataLayer[key][a]);
                _SgmntfY_._getDataLayer()[key][a]['__processed__'] = true;
              }
            } else {
              extractEvent(key, dataLayer[key]);
              _SgmntfY_._getDataLayer()[key]['__processed__'] = true;
            }
          }
        }
        if (dlq.length > 0) {
          _SgmntfY_._sendRequestToServer(dlq);
        }
      }
    },
    _getNextPageQueue: function () {
      try {
        var nextPageQueueStorage = _SgmntfY_._variables.storage.nextPageQueue;
        return JSON.parse(_SgmntfY_._getPersistentData(nextPageQueueStorage.key, nextPageQueueStorage.local)) || [];
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('ERROR', "Can't read next page queue: " + err);
      }
      return [];
    },
    _setNextPageQueue: function (nextPageQueue) {
      var nextPageQueueStorage = _SgmntfY_._variables.storage.nextPageQueue;
      _SgmntfY_._storePersistentData(nextPageQueueStorage.key, JSON.stringify(nextPageQueue), 0, nextPageQueueStorage.local);
    },
    _addToNextPageQueue: function (request) {
      var npq = _SgmntfY_._getNextPageQueue();
      npq.push(request);
      _SgmntfY_._setNextPageQueue(npq);
    },
    _consumeNextPageQueue: function () {
      var npq = _SgmntfY_._getNextPageQueue();
      if (npq && npq.length > 0) {
        var q = [];
        while (npq.length > 0) {
          var ev = npq.shift();
          // update user and session id
          ev.data.userId = _SgmntfY_._getUserId();
          ev.data.sessionId = _SgmntfY_._getSessionId();
          q.push(ev);
        }
        _SgmntfY_._sendRequestToServer(q);
        _SgmntfY_._setNextPageQueue([]);
      }
    },
    _addRecommendedProduct: function (productId) {
      _SgmntfY_._variables.recommendedProducts.push(productId);
    },
    _containsRecommendedProduct: function (productId) {
      return _SgmntfY_._variables.recommendedProducts.indexOf(productId) >= 0;
    },
    _getExtensionStatus: function () {
      try {
        var extensionStatusStorage = _SgmntfY_._variables.storage.extensionStatus;
        return _SgmntfY_._getPersistentData(extensionStatusStorage.key, extensionStatusStorage.local) || '';
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('DEBUG', "Can't read extension status: " + err);
      }
      return '';
    },
    // Getters
    _getJq: function () {
      return _SgmntfY_._variables.jq;
    },
    _getMustache: function () {
      return _SgmntfY_._variables.mustache;
    },
    _getObjectByString: function (o, s) {
      s = s.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
      s = s.replace(/^\./, '');           // strip a leading dot
      var a = s.split('.');
      for (var i = 0, n = a.length; i < n; ++i) {
        var k = a[i];
        if (k in o) {
          o = o[k];
        } else {
          return;
        }
      }
      return o;
    },
    // Misc
    _isUndefined: function(value) { return typeof value === 'undefined'; },
    _notNull: function(value) { return typeof value !== 'undefined' && value != null; },
    _isEmpty: function(value) { return (typeof value === 'undefined' || value == null || value == ""); },
    _isNotEmpty: function(value) { return !_SgmntfY_._isEmpty(value); },
    _isPlainObject: function( obj ) {
      if (typeof obj == 'object' && obj !== null) {
        if (typeof Object.getPrototypeOf == 'function') {
          var proto = Object.getPrototypeOf(obj);
          return proto === Object.prototype || proto === null;
        }
        return Object.prototype.toString.call(obj) == '[object Object]';
      }
      return false;
    },
    _exists: function (elem) {
      if (elem instanceof HTMLElement) {
        return elem !== null;
      } else if (elem instanceof HTMLCollection || elem instanceof _SgmntfY_._getJq() || elem instanceof jQuery || elem instanceof $) {
        return elem.length > 0;
      } else {
        return false;
      }
    },
    _extend: function () {
      var options, name, src, copy, clone,
          target = arguments[0] || {},
          i = 1,
          length = arguments.length,
          deep = false;

      // Handle a deep copy situation
      if (typeof target === "boolean") {
        deep = target;
        // Skip the boolean and the target
        target = arguments[i] || {};
        i++;
      }

      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        if ((options = arguments[i]) != null) {
          // Extend the base object
          for (name in options) {
            if (options.hasOwnProperty(name)) {
              src = target[name];
              copy = options[name];

              // Prevent never-ending loop
              if (target === copy) {
                continue;
              }

              // Recurse if we're merging plain objects or arrays
              if (deep && copy && _SgmntfY_._isPlainObject(copy)) {
                clone = src && ((typeof src === "object") && (src !== null)) ? src : {};

                // Never move original objects, clone them
                target[name] = _SgmntfY_._extend(deep, clone, copy);

                // Don't bring in undefined values
              } else if (copy !== undefined) {
                target[name] = copy;
              }
            }
          }
        }
      }

      // Return the modified object
      return target;
    },
    _split: function (str, separator, limit) {
      if (str && typeof str === 'string') {
        var i, array = str.split(separator);
        for (i = 0; i < array.length; i++) {
          array[i] = array[i].trim();
        }
        if(limit && limit < array.length) {
          var result = array.splice(0,limit - 1);
          result.push(array.join(separator));
          array = result;
        }
        return array;
      }
      else return null;
    },
    _parseFloat: function (value) {
      if (value == null) return value;
      else if (typeof value === "undefined") return null;
      else if (typeof value === "number") return value;
      else if (typeof value === "string") return parseFloat(value);
      else return value;
    },
    _parseBoolean: function (value) {
      if (typeof value === "undefined") return null;
      else if (typeof value === "number") {
        if (value === 0) return "false";
        else return "true";
      }
      else if (typeof value === "string") {
        if (value === "0" || value.toLowerCase() === "false") return "false";
        else return "true";
      }
      else if (typeof value === "boolean") return value.toString();
      else return value;
    },
    _clearNull: function (item) {
      return item != undefined && item != '';
    },
    _checkVersion: function (required, current) {
      var cur = current.split('.');
      var min = required.split('.');
      prevs = [];

      for (var i = 0, len = Math.max(cur.length, min.length); i < len; i++) {
        cur[i] = parseInt(cur[i]);
        if (isNaN(cur[i])) cur[i] = 0;
        min[i] = parseInt(min[i]);
        if (isNaN(min[i])) min[i] = 0;
        if (cur[i] < min[i]) return false;
        else if (cur[i] > min[i]) return true;
      }
      return true;
    },
    _updateBrowserAndDeviceInfo: function () {
      var _bowser = window['bowser']._detect(_SgmntfY_._variables.ua.agentString);
      if (_SgmntfY_._variables.ua.type == null) {
        // type
        if (_bowser.tablet) _SgmntfY_._variables.ua.type = 'tablet';
        else if (_bowser.mobile) _SgmntfY_._variables.ua.type = 'mobile';
        else _SgmntfY_._variables.ua.type = 'PC';
        // name
        if (_bowser.chromium) _SgmntfY_._variables.ua.name = 'Chrome';
        else _SgmntfY_._variables.ua.name = _bowser.name;
        // version
        _SgmntfY_._variables.ua.version = _bowser.version;
      }
      if (_SgmntfY_._variables.ua.os == null) {
        // os
        if (_bowser.windows) _SgmntfY_._variables.ua.os = 'Windows';
        else if (_bowser.linux) _SgmntfY_._variables.ua.os = 'Linux';
        else if (_bowser.mac) _SgmntfY_._variables.ua.os = 'MacOS';
        else if (_bowser.android) _SgmntfY_._variables.ua.os = 'Android';
        else if (_bowser.ios) _SgmntfY_._variables.ua.os = 'iOS';
        else _SgmntfY_._variables.ua.os = 'Other';
      }
    },
    _addLeavePageHandler: function (action, request) {
      var type = action["type"];
      var params = action["params"];
      var actionFunction = _SgmntfY_._actions[type];

      _SgmntfY_.LOG_MESSAGE('INFO', 'Action(' + type + ') will be triggered when user leaves page');
      var mouseLeaveHandler = function (event) {
        if (event.clientY < 0) {
          _SgmntfY_.LOG_MESSAGE('INFO', 'Action(' + type + ') is triggered at user leave page');
          _SgmntfY_._getJq()(document).unbind('mouseleave', mouseLeaveHandler);
          actionFunction.call(null, params, request);
        }
      };
      _SgmntfY_._getJq()(document).bind('mouseleave', mouseLeaveHandler);
    },
    _addWaitPageHandler: function (action, request) {
      var type = action["type"];
      var params = action["params"];
      var delayAction = action["delayAction"] || null;
      var actionFunction = _SgmntfY_._actions[type];

      var delayTime = parseInt(delayAction.time);
      _SgmntfY_.LOG_MESSAGE('INFO', 'Action(' + type + ') will be triggered after ' + delayTime + ' second(s) delay on same page');
      setTimeout(function () {
        _SgmntfY_.LOG_MESSAGE('INFO', 'Action(' + type + ') is triggered after delay');
        actionFunction.call(null, params, request);
      }, parseInt(delayTime) * 1000);
    },
    // campaign handlers
    _addCampaignDelayHandler: function (campaign, request) {
      var type = campaign['type'];
      var timing = campaign['timing'];
      var delayTime = parseInt(timing.param);
      _SgmntfY_.LOG_MESSAGE('INFO', 'Campaign (' + type + ') will be triggered after ' + delayTime + ' second(s) delay on same page');
      window.setTimeout(function () {
        _SgmntfY_.LOG_MESSAGE('INFO', 'Campaign (' + type + ') triggered after ' + delayTime + ' delay');
        var campaignFunction = _SgmntfY_._campaigns[type];
        campaignFunction.call(null, campaign, request);
      }, delayTime * 1000);
    },
    _addCampaignScrollHandler: function (campaign, request) {
      var type = campaign['type'];
      var timing = campaign['timing'];
      var scrollPct = parseInt(timing.param);
      _SgmntfY_.LOG_MESSAGE('INFO', 'Campaign (' + type + ') will be triggered after ' + scrollPct + '% of page is scrolled');
      var scrollHandler = function () {
        if (scrollPct > _SgmntfY_._getScrollPercent()) {
          _SgmntfY_.LOG_MESSAGE('INFO', 'Campaign (' + type + ') triggered after ' + scrollPct + '% of page is scrolled');
          _SgmntfY_._getJq()(document).unbind('scroll', scrollHandler);
          var campaignFunction = _SgmntfY_._campaigns[type];
          campaignFunction.call(null, campaign, request);
        }
      };
      _SgmntfY_._getJq()(document).bind('scroll', scrollHandler);
    },
    _addCampaignLeaveHandler: function (campaign, request) {
      var type = campaign['type'];
      _SgmntfY_.LOG_MESSAGE('INFO', 'Campaign (' + type + ') will be triggered when user leaves page');
      var leaveHandler = function (event) {
        if (event.clientY < 0) {
          _SgmntfY_.LOG_MESSAGE('INFO', 'Campaign (' + type + ') triggered at user leave page');
          _SgmntfY_._getJq()(document).unbind('mouseleave', leaveHandler);
          var campaignFunction = _SgmntfY_._campaigns[type];
          campaignFunction.call(null, campaign, request);
        }
      };
      _SgmntfY_._getJq()(document).bind('mouseleave', leaveHandler);
    },
    _addCampaignInteractionHandler: function (campaign, request) {

    },
    _getScrollPercent: function () {
      var h = document.documentElement,
        b = document.body,
        st = 'scrollTop',
        sh = 'scrollHeight';
      return (h[st]||b[st]) / ((h[sh]||b[sh]) - h.clientHeight) * 100;
    },
    // Post Data
    _updateUserAndSessionId: function (requiredKeyCount) {
      _SgmntfY_._variables.waitingKeys = true;
      // get keys
      var request = {
        data: null,
        url: _SgmntfY_._variables.segmentifyApiUrl + "/get/key/v1.json?count=" + requiredKeyCount
      };
      _SgmntfY_._getJq().ajax({
        contentType: 'text/plain',
        processData: false,
        type: 'GET',
        url: request.url,
        timeout: (_SgmntfY_._variables.constants.eventTimeout * 1000)
      }).done(function (responseData, textStatus, jqXHR) {
        _SgmntfY_._ajaxSuccess(request, responseData, textStatus);
        // update user id
        if (requiredKeyCount == 2) {
          _SgmntfY_._storePersistentData(_SgmntfY_._variables.userStorageKey, responseData[1], 180); // expire in 180 days
          var userId = _SgmntfY_._getUserId();
          if (_SgmntfY_._isEmpty(userId)) {
            _SgmntfY_.LOG_MESSAGE('ERROR', "Can't update User Id");
            return;
          }
          _SgmntfY_.LOG_MESSAGE('INFO', "User Id Changed: " + userId);
        }
        // update session id
          _SgmntfY_._storePersistentData(_SgmntfY_._variables.sessionStorageKey, responseData[0], 0.02); // expire in approx. 30 mins.
        if (_SgmntfY_._isEmpty(_SgmntfY_._getSessionId())) {
          _SgmntfY_.LOG_MESSAGE('ERROR', "Can't update User Session");
          return;
        }
          _SgmntfY_.LOG_MESSAGE('INFO', "User Session Changed: " + responseData[0]);
          _SgmntfY_._variables.waitingKeys = false;
      }).fail(function (jqXHR, textStatus, errorThrown) {
        _SgmntfY_._ajaxError(request, jqXHR, textStatus, errorThrown);
        _SgmntfY_._variables.waitingKeys = false;
      });
    },
    _sendRequestToServer: function (requestDataArray) {
      // check datas
      if (!requestDataArray || requestDataArray.length <= 0) return;

      // combine data of all requests
      var dataArray = [];
      for (var i = 0; i < requestDataArray.length; i++) {
        dataArray.push(requestDataArray[i].data);
      }

      _SgmntfY_._getJq().ajax({
        contentType: 'text/plain',
        processData: false,
        type: 'POST',
        url: _SgmntfY_._variables.segmentifyApiUrl + "/add/events/v1.json?apiKey=" + _SgmntfY_._variables.apiKey,
        data: JSON.stringify(dataArray),
        timeout: (_SgmntfY_._variables.constants.eventTimeout * 1000)
      }).done(function (responseData, textStatus, jqXHR) {
        _SgmntfY_._ajaxSuccess(dataArray, responseData, textStatus);
        var responses = responseData['responses'];
        var campaigns = responseData['campaigns'];

        // check all responses
        if (responses.length == requestDataArray.length && campaigns.length == requestDataArray.length) {
          for (var j = 0; j < responses.length; j++) {
            var request = requestDataArray[j];
            var responseArray = responses[j];
            var campaignArray = campaigns[j];

            // check discard flag
            if (request.originalParams.discardResponse != "true") {
              _SgmntfY_._getResponse(request, responseArray);
              _SgmntfY_._getCampaign(request, campaignArray);
            } else {
              _SgmntfY_.LOG_MESSAGE('DEBUG', 'Action(' + request.eventName + ') responses are discarded');
            }
          }
        } else {
          _SgmntfY_.LOG_MESSAGE('WARN', 'Segmentify response length(' + responses.length + ') doesn\'t match request length(' + requestDataArray.length + ')');
        }
      }).fail(function (jqXHR, textStatus, errorThrown) {
        _SgmntfY_._addToRetryQueue(requestDataArray);
        _SgmntfY_._ajaxError(dataArray, jqXHR, textStatus, errorThrown);
      });
    },
    // Response Handlers
    _getResponse: function (request, responseArray) {
      for (var key = 0; key < responseArray.length; key++) {
        var response = responseArray[key];
        if (response.hasOwnProperty("type")) {
          var type = response["type"];
          var delayAction = response["delayAction"] || null;
          var params = response["params"];
          var instanceId = response["instanceId"];
          var actionFunction = _SgmntfY_._actions[type];
          if (params.isControlGroup === false) {
            _SgmntfY_._addActiveCampaign(params.instanceId, 'control');
            _SgmntfY_.LOG_MESSAGE('DEBUG', 'User is in control group for campaign: ' + params.instanceId);
            continue;
          } else {
            _SgmntfY_._addActiveCampaign(params.instanceId, 'actual');
          }
          if (typeof actionFunction === 'function') {
            // triggered when user leaves window
            if (delayAction && delayAction.type == 'LEAVE_PAGE') {
              _SgmntfY_._addLeavePageHandler(response, request);
            } else if (delayAction && delayAction.type == 'WAIT_SAME_PAGE' && parseInt(delayAction.time) > 0) {
              _SgmntfY_._addWaitPageHandler(response, request);
            } else if (delayAction && delayAction.type == 'WAIT_ALL_PAGES' && parseInt(delayAction.time) > 0) {
              // check this action is already stored for triggering
              var delayDate = new Date((new Date()).getTime() + (1000 * parseInt(delayAction.time)));
              var action = {
                delayDate: delayDate,
                params: params,
                type: type,
                request: request
              };
              if (!_SgmntfY_._addDelayedAction(action)) {
                _SgmntfY_.LOG_MESSAGE('INFO', 'Action(id=' + action.params.actionId + ') is already added for delayed action');
              } else {
                _SgmntfY_.LOG_MESSAGE('INFO', 'Action(id=' + action.params.actionId + ') is added for delayed action in future');
              }
            } else {
              _SgmntfY_.LOG_MESSAGE('INFO', 'Action(' + type + ') triggered immediately');
              actionFunction.call(null, params, request);
            }
          } else {
            _SgmntfY_.LOG_MESSAGE('WARN', 'Unknown action: ' + type);
          }
        }
      }
    },
    // campaign handler
    _getCampaign: function (request, campaignArray) {
      for (var key = 0; key < campaignArray.length; key++) {
        var campaign = campaignArray[key] || {};
        if (campaign.hasOwnProperty('type')) {
          var type = campaign['type'];
          var campaignFunction = _SgmntfY_._campaigns[type];
          if (typeof campaignFunction === 'function') {
            var timing = campaign['timing'] || {};
            if (timing.type === 'DELAY') {
              _SgmntfY_._addCampaignDelayHandler(campaign, request);
            } else if (timing.type === 'SCROLL') {
              _SgmntfY_._addCampaignScrollHandler(campaign, request);
            } else if (timing.type === 'PAGELEAVE') {
              _SgmntfY_._addCampaignLeaveHandler(campaign, request);
            } else if (timing.type === 'INTERACTION') {
              _SgmntfY_._addCampaignInteractionHandler(campaign, request);
            } else {
              _SgmntfY_.LOG_MESSAGE('INFO', 'Campaign (' + type + ') triggered immediately.');
              campaignFunction.call(null, campaign, request);
            }
          } else {
            _SgmntfY_.LOG_MESSAGE('WARN', 'Unknown campaign: ' + type);
          }
        }
      }
    },
    // Meta Data Parser
    _extractProductDataFromMetaTags: function (basicData) {
      var productMicroData = _SgmntfY_._getProductMicroDataElement();
      basicData.title = basicData.title || _SgmntfY_._getMicroDataValue(productMicroData, 'name') || _SgmntfY_._getTagData("meta[property='og:title']", "content") || document.title;
      basicData.url = _SgmntfY_._clearProductUrl(basicData.url || _SgmntfY_._getMicroDataValue(productMicroData, 'url') || _SgmntfY_._getTagData("meta[property='og:url']", "content") || _SgmntfY_._getTagData("link[rel='canonical']", "href") || document.URL);
      basicData.image = basicData.image || _SgmntfY_._getMicroDataValue(productMicroData, 'image') || _SgmntfY_._getTagData("meta[property='og:image']", "content");
      basicData.categories = basicData.categories || _SgmntfY_._split(_SgmntfY_._getMicroDataValue(productMicroData, 'category'), new RegExp([',', '>'].join('|'), 'g')) || _SgmntfY_._split(_SgmntfY_._getTagData("meta[property='product:category']", "content"), ',') || [];
      basicData.price = basicData.price || _SgmntfY_._parseFloat(_SgmntfY_._getMicroDataValue(_SgmntfY_._getMicroDataValue(productMicroData, 'offers'), 'price')) || _SgmntfY_._parseFloat(_SgmntfY_._getTagData("meta[property='product:price:amount']", "content"));
      basicData.oldPrice = basicData.oldPrice || _SgmntfY_._parseFloat(_SgmntfY_._getTagData("meta[property='product:original_price:amount']", "content"));
      basicData.inStock = _SgmntfY_._parseBoolean(basicData.inStock) || 'true';
      basicData.params = basicData.params || {};
    },
    _sourceOfUrl: function () {
      var source = '';
      if (document.URL || document.referrer) {
        var gclid = _SgmntfY_._getQueryParameter('gclid');
        if (gclid.length) {
          return "PAID";
        }
        var utm_medium = _SgmntfY_._getQueryParameter('utm_medium');
        if (utm_medium.length) {
          switch (utm_medium) {
            case 'social':
              source = 'SOCIAL';
              break;
            case 'organic':
              source = 'SEARCH';
              break;
            case 'cpc':
            case 'cpm':
            case 'ocpm':
            case 'paid-media':
            case 'affiliate':
            case 'banner':
            case 'retargeting':
            case 'shopping':
              source = 'PAID';
              break;
            case 'email':
              source = 'EMAIL';
              break;
            default:
              break;
          }
        }
        if (!source.length) {
          // extract domain from referrer
          var referrer = document.referrer.replace('https://', '').replace('http://', '');
          referrer = referrer.substring(0, referrer.indexOf('/'));
          if (referrer.indexOf(_SgmntfY_._variables.domain) != -1) {
            source = 'INTERNAL';
          } else if (referrer.indexOf('facebook') != -1 || referrer.indexOf('twitter') != -1 || referrer.indexOf('t.co') != -1
            || referrer.indexOf('instagram') != -1 || referrer.indexOf('pinterest') != -1) {
            source = 'SOCIAL';
          } else if (referrer.indexOf('google') != -1 || referrer.indexOf('g.co') != -1 || referrer.indexOf('bing') != -1
            || referrer.indexOf('yandex') != -1 || referrer.indexOf('yahoo') != -1) {
            source = 'SEARCH';
          } else if (referrer.indexOf('cimri') != -1 || referrer.indexOf('akakce') != -1
            || referrer.indexOf('ucuzcu') != -1 || referrer.indexOf('bilio') != -1) {
            source = 'LISTING';
          }
        }
        if (!source.length) {
          source = 'OTHER';
        }
      }

      return source;
    },
    _getTagData: function (tagQuery, tagName) {
      var obj = _SgmntfY_._getJq()(tagQuery);
      return obj ? obj.attr(tagName) : null;
    },
    _getProductMicroDataElement: function () {
      var element = _SgmntfY_._getJq()('[itemtype="http://schema.org/Product"]');
      if (element && element.length > 0) return element.first();
      else return null;
    },
    _getMicroDataValue: function (obj, name) {
      if (obj && obj.length > 0) {
        var __$$ = _SgmntfY_._getJq();
        var props = [];

        function crawl(root) {
          var toTraverse = [root];

          function ancestor(node) {
            while (node.parentNode) node = node.parentNode;
            return node;
          }

          function splitTokens(s) {
            if (s && /\S/.test(s)) return s.replace(/^\s+|\s+$/g, '').split(/\s+/);
            else return [];
          }

          function itemProp(obj) {
            return splitTokens(obj.attr('itemprop'));
          }

          function itemRef(obj) {
            return splitTokens(obj.attr('itemref'));
          }

          function traverse(node) {
            for (var i = 0; i < toTraverse.length; i++) {
              if (toTraverse[i] == node)
                toTraverse.splice(i--, 1);
            }
            var $node = __$$(node);
            if (node != root) {
              var names = itemProp($node);
              if (names.length) {
                if (!name || __$$.inArray(name, names) >= 0) props.push(node);
              }
              if ($node[0].getAttribute('itemscope') != null) return;
            }

            $node.children().each(function () {
              traverse(this);
            });
          }

          var context = ancestor(root);
          __$$.each(itemRef(__$$(root)), function (i, id) {
            var $ref = __$$('#' + id, context);
            if ($ref.length)
              toTraverse.push($ref[0]);
          });
          __$$.unique(toTraverse);

          while (toTraverse.length) {
            traverse(toTraverse[0]);
          }
        }

        if (obj[0].getAttribute('itemscope') != null) crawl(obj[0]);

        // get first and return value
        var targetItem = __$$(props).first();

        function itemValue(targetItem) {
          if (targetItem && targetItem.length > 0) {
            var elm = targetItem[0];
            if (elm.getAttribute('itemprop') == null) return null;
            if (elm.getAttribute('itemscope') != null) return targetItem; // or a new jQuery object?

            switch (elm.tagName.toUpperCase()) {
              case 'META':
                return targetItem.attr('content') || '';
              case 'AUDIO':
              case 'EMBED':
              case 'IFRAME':
              case 'IMG':
              case 'SOURCE':
              case 'TRACK':
              case 'VIDEO':
                return targetItem.attr('src') || '';
              case 'A':
              case 'AREA':
              case 'LINK':
                return targetItem.attr('href') || ''
              case 'OBJECT':
                return targetItem.attr('data') || ''
              case 'DATA':
                return targetItem.attr('value') || '';
              case 'TIME':
                var datetime = elm.getAttribute('datetime');
                if (datetime != null) return datetime;
              default:
                return targetItem.text();
            }
          }
          return null;
        }

        return itemValue(targetItem);
      }
      else return null;
    },
    // add serialize form method
    _enableSerializeForm: function ($) {
      if ($.fn.sgmSerializeForm) return;
      $.fn.sgmSerializeForm = function () {
        "use strict";

        var result = {};
        var extend = function (i, element) {
          var node = result[element.name];

          // If node with same name exists already, need to convert it to an array as it
          // is a multi-value field (i.e., checkboxes)

          if ('undefined' !== typeof node && node !== null) {
            if ($.isArray(node)) {
              node.push(element.value);
            } else {
              result[element.name] = [node, element.value];
            }
          } else {
            result[element.name] = element.value;
          }
        };

        $.each(this.serializeArray(), extend);

        // convert array into joined strings
        $.each(result, function(key, value) {
          if ('undefined' !== typeof value && value !== null && $.isArray(value)) {
            result[key] = value.join();
          }
        });

        return result;
      };
    },
    // Initializers
    init: function () {
      // get Segmentify object
      _SgmntfY_._variables.namespace = window['SegmentifyTrackingObject'];
      _SgmntfY_._variables.segmentifyObj = window[_SgmntfY_._variables.namespace];
      if (!_SgmntfY_._notNull(_SgmntfY_._variables.segmentifyObj) || !_SgmntfY_._notNull(_SgmntfY_._variables.segmentifyObj.q)) {
        ++_SgmntfY_._variables.initTryCount;
        if (_SgmntfY_._variables.initTryCount > _SgmntfY_._variables.initTryLimit) {
          /*console.error("Segmentify initialization code error, namespace: " + _SgmntfY_._variables.namespace);*/
          window.clearTimeout(_SgmntfY_._variables.initTimer);
          return;
        }
        window.clearTimeout(_SgmntfY_._variables.initTimer);
        _SgmntfY_._variables.initTimer = window.setTimeout(_SgmntfY_.init, 100);
      } else {
        if (_SgmntfY_._variables.initTimer) {
          window.clearTimeout(_SgmntfY_._variables.initTimer);
        }
        _SgmntfY_.modernize();
        _SgmntfY_.LOG_MESSAGE('DEBUG', '*** Segmentify is loading... ***');
        // merge defaults with user given parameters
        _SgmntfY_._extend(true, _SgmntfY_._variables, _SgmntfY_._variables.segmentifyObj.config);
        _SgmntfY_._functions.setLogLevel(_SgmntfY_._variables.logLevel);

        // check domain is set
        if (!(_SgmntfY_._variables.domain && document.URL.indexOf(_SgmntfY_._variables.domain) >= 0)) {
          console.error("Segmentify domain is not set properly: " + _SgmntfY_._variables.domain);
          return;
        }

        if (_SgmntfY_._variables.domain.indexOf("n11.com") != -1) {
          _SgmntfY_._variables.domain = ".n11.com";
        }

        // initialize variables
        window.onunload = _SgmntfY_._windowUnload;
        // load necessary libraries
        if (_SgmntfY_._variables.jq == null) {
          _SgmntfY_._loadJavascript(_SgmntfY_._variables.jQueryUrl, true, function () {
            _SgmntfY_._variables.jq = jQuery.noConflict(true);
            _SgmntfY_._enableSerializeForm(_SgmntfY_._variables.jq);
            if (_SgmntfY_._variables.initializeFancybox) {
              initializeSegmentifyFancybox(window, document, _SgmntfY_._variables.jq);
            }
            // initialize delayed actions process tracked event
            _SgmntfY_._initializeDelayedActions();
            _SgmntfY_._sendTrackedEvent();
            _SgmntfY_._setTestMode();
          });
        } else {
          if (!_SgmntfY_._checkVersion("1.7", _SgmntfY_._variables.jq.fn.jquery)) {
            console.error("Segmentify requires jQuery version >= 1.7");
            return;
          }
          _SgmntfY_._enableSerializeForm(_SgmntfY_._variables.jq);
          if (_SgmntfY_._variables.initializeFancybox) {
            initializeSegmentifyFancybox(window, document, _SgmntfY_._variables.jq);
          }
          // initialize delayed actions process tracked event
          _SgmntfY_._initializeDelayedActions();
          _SgmntfY_._sendTrackedEvent();
          _SgmntfY_._setTestMode();
        }

        if (_SgmntfY_._variables.mustache == null) {
          _SgmntfY_._variables.mustache = {};
          initializeMustache(_SgmntfY_._variables.mustache);
          _SgmntfY_._variables.mustache.tags = [ "[[", "]]"];
        }

        // Get Browser & Device Info
        _SgmntfY_._updateBrowserAndDeviceInfo();

        // run loop
        _SgmntfY_.LOG_MESSAGE('DEBUG', '*** Running on a ' + _SgmntfY_._variables.ua.type + ' ***');
        _SgmntfY_.LOG_MESSAGE('DEBUG', '*** Segmentify loaded and started... ***');
        _SgmntfY_.run();

        // tell the whole world segmentify is inited
        _SgmntfY_._dispatchInitEvent();
      }
    },
    _initializeDelayedActions: function () {
      try {
        // get delayed actions and reset
        var delayedActions = _SgmntfY_._getDelayedActions();
        _SgmntfY_._setDelayedActions([]);
        // try to re-add them
        var currentDate = new Date();
        for (var i = 0; i < delayedActions.length; i++) {
          delayedActions[i].delayDate = new Date(delayedActions[i].delayDate);
          if (delayedActions[i].delayDate.getTime() > currentDate.getTime()) {
            _SgmntfY_._addDelayedAction(delayedActions[i]);
          }
        }
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('ERROR', "Can't initialize delayed actions: " + err);
      }
    },
    _dispatchInitEvent: function () {
      try {
        if (window.dispatchEvent) {
          var detailObj = {
            testMode: _SgmntfY_._getTestMode()
          };
          window.dispatchEvent(new CustomEvent('segmentifyInited', {detail: detailObj}));
        }
      } catch (err) {}
    },
    // Request Loggers
    _ajaxError: function (request, jqXHR, textStatus, errorThrown) {
      _SgmntfY_.LOG_MESSAGE('WARN',
        "Error in sending event:\n" +
        "Event Data: " + JSON.stringify(request.data) + "\n" +
        "Response: " + jqXHR.responseText + "\n" +
        "Status: " + textStatus + "\n" +
        "Error: " + errorThrown);
    },
    _ajaxSuccess: function (requestData, responseData, textStatus) {
      _SgmntfY_.LOG_MESSAGE('DEBUG',
        "Success in sending event:\n" +
        "Event Data: " + JSON.stringify(requestData) + "\n" +
        "Status: " + textStatus + "\n" +
        "Response Data: " + JSON.stringify(responseData));
    },
    // Document Unload Function To Store all events to cookie
    _windowUnload: function () {
      // set unload true
      _SgmntfY_._variables.isUnload = true;
      // cancel run timer
      window.clearTimeout(_SgmntfY_._variables.runTimer);
      // first add normal event queue
      var q = [];
      while (_SgmntfY_._variables.segmentifyObj.q.length > 0) {
        try {
          var command = _SgmntfY_._variables.segmentifyObj.q.shift();
          var commandFunction = _SgmntfY_._functions.getFunction(command[0]);
          var commandArguments = Array.prototype.slice.call(command, 1);
          var ev = commandFunction.apply(null, commandArguments);
          ev.originalParams.discardResponse = 'true';
          q.push(ev);
        } catch(err) {}
      }
      // second add retry queue
      var rq = _SgmntfY_._getRetryQueue();
      while (rq.length > 0) {
        try {
          var ev = rq.shift();
          ev.originalParams.discardResponse = 'true';
          q.push(ev);
        } catch (err) {}
      }
      // store all events in storage
      _SgmntfY_._setRetryQueue(q);
    },
    // run - process messages in queue
    run: function () {
      try {
        // if jQuery not loaded or queue not created, wait for it
        if (_SgmntfY_._variables.jq && ((_SgmntfY_._variables.segmentifyObj.q && _SgmntfY_._variables.segmentifyObj.q.length > 0) || _SgmntfY_._getDataLayer())) {
          if (!_SgmntfY_._variables.waitingKeys) {
            // update user & session id if necessary
            var requiredKeyCount = 0;
            var userId = _SgmntfY_._getUserId();
            var sessionId = _SgmntfY_._getSessionId();
            if (_SgmntfY_._isEmpty(userId)) requiredKeyCount = 2;
            else if (_SgmntfY_._isEmpty(sessionId)) requiredKeyCount = 1;
            else if (_SgmntfY_._isNotEmpty(sessionId) && _SgmntfY_._variables.segmentifyObj.q.length > 0) {
              _SgmntfY_._storePersistentData(_SgmntfY_._variables.sessionStorageKey, sessionId, 0.02);
            }
            if (requiredKeyCount > 0) {
              _SgmntfY_._updateUserAndSessionId(requiredKeyCount);
            } else {
              // if not waiting status, normal operation
              if (_SgmntfY_._variables.segmentifyObj.q && _SgmntfY_._variables.segmentifyObj.q.length > 0) {
                var commands = _SgmntfY_._variables.segmentifyObj.q.splice(0, _SgmntfY_._variables.segmentifyObj.q.length);
                _SgmntfY_._functions.callFunction(commands);
              }
              if (_SgmntfY_._getDataLayer()) {
                _SgmntfY_._consumeDataLayer();
              }
            }
          }
        }
        // after queue empty invoke again
        window.clearTimeout(_SgmntfY_._variables.runTimer);
        _SgmntfY_._variables.runTimer = window.setTimeout(_SgmntfY_.run, _SgmntfY_._variables.constants.frequency);
      } catch (err) {
        _SgmntfY_.LOG_MESSAGE('ERROR', 'Error in run: ' + err);
        // after error invoke again
        window.clearTimeout(_SgmntfY_._variables.runTimer);
        _SgmntfY_._variables.runTimer = window.setTimeout(_SgmntfY_.run, _SgmntfY_._variables.constants.frequency);
      }
    },
    modernize: function () {
      // string startsWith
      if (typeof String.prototype.startsWith !== 'function') {
        String.prototype.startsWith = function (prefix) {
          return this.lastIndexOf(prefix, 0) === 0;
        };
      }

      // string endsWith
      if (typeof String.prototype.endsWith !== 'function') {
        String.prototype.endsWith = function (suffix) {
          return this.indexOf(suffix, this.length - suffix.length) !== -1;
        };
      }

      // string trim
      if (typeof String.prototype.trim !== 'function') {
        String.prototype.trim = function () {
          return this.replace(/^\s+|\s+$/g, '');
        }
      }

      // string replaceAt
      if (typeof String.prototype.replaceAt !== 'function') {
        String.prototype.replaceAt = function (index, character) {
          return this.substring(0, index) + character + this.substring(index + character.length);
        }
      }

      // Array indexOf
      if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function (searchElement, fromIndex) {
          if (this == null) {
            throw new TypeError('"this" is null or not defined');
          }

          var O = Object(this);
          var len = O.length >>> 0;
          if (len === 0) { return -1; }

          var n = +fromIndex || 0;
          if (Math.abs(n) === Infinity) { n = 0; }
          if (n >= len) { return -1; }

          var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
          while (k < len) {
            if (k in O && O[k] === searchElement) { return k; }
            k++;
          }
          return -1;
        };
      }

      // Array map
      if (!Array.prototype.map) {
        Array.prototype.map = function(callback, thisArg) {
          var T, A, k;
          if (this == null) {
            throw new TypeError(' this is null or not defined');
          }
          var O = Object(this);
          var len = O.length >>> 0;
          if (typeof callback !== 'function') {
            throw new TypeError(callback + ' is not a function');
          }
          if (arguments.length > 1) {
            T = thisArg;
          }
          A = new Array(len);
          k = 0;
          while (k < len) {
            var kValue, mappedValue;
            if (k in O) {
              kValue = O[k];
              mappedValue = callback.call(T, kValue, k, O);
              A[k] = mappedValue;
            }
            k++;
          }
          return A;
        };
      }

      // JSON stringify ensure
      var __original_json_stringify__ = JSON.stringify;
      JSON.stringify = function (value) {
        // store original
        var arrayToJSON = Array.prototype.toJSON;
        var numberToJSON = Number.prototype.toJSON;
        var stringToJSON = String.prototype.toJSON;
        // delete them
        delete Number.prototype.toJSON;
        delete Array.prototype.toJSON;
        delete String.prototype.toJSON;
        // calculate
        var result = undefined;
        try {
          result = __original_json_stringify__(value);
        }
        catch (err) {
          result = undefined;
        }
        // restore
        if (arrayToJSON) Array.prototype.toJSON = arrayToJSON;
        if (numberToJSON) Number.prototype.toJSON = numberToJSON;
        if (stringToJSON) String.prototype.toJSON = stringToJSON;

        return result;
      };

      if (typeof window.CustomEvent !== "function") {
        function CustomEvent(event, params) {
          params = params || {bubbles: false, cancelable: false, detail: undefined};
          var evt = document.createEvent('CustomEvent');
          evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
          return evt;
        }

        CustomEvent.prototype = window.Event.prototype;

        window.CustomEvent = CustomEvent;
      }
    },
    LOG_MESSAGE: function (logLevel, message) {
      var currentLevel = _SgmntfY_._variables.logLevel;
      var logLevelObject = _SgmntfY_.LOG_LEVELS[logLevel];
      if (typeof logLevelObject != 'undefined' && logLevelObject <= currentLevel) {
        console.log('Segmentify[' + logLevel + ']: ' + message);
      }
    }
  };

  // initialize Segmentify
  _SgmntfY_.init();
})(window);

var interval = setInterval(function () {
  if (typeof _SgmntfY_ !== 'undefined' && _SgmntfY_._isNotEmpty(_SgmntfY_._variables.apiKey) && _SgmntfY_._variables.apiKey == '4c90b154-53f1-4762-9177-f535de5c4e42') {
    clearInterval(interval);
    var wa = document.createElement('script');
    wa.async = 1;
    wa.src = "//cdn.segmentify.com/account-js/4c90b154-53f1-4762-9177-f535de5c4e42.js";
    var s = document.getElementsByTagName('script')[0];
    s.parentNode.insertBefore(wa, s);
  }
}, 250);
